==========================
Documentation Type: MIS
Last Updated: Dec 2, 2013
Author: Daniel Deyaegher
==========================

WordTable.MIS
*****************
State invariant:
   1. wordList contains numWords pointers to null-terminated C strings.
   2. wordList strings are sorted in ascending order.


--------------------------
Class Method getNextWord
--------------------------
Inputs: fp = name of the file to read from

Exceptions: traversal hits end of file fp

Assumptions: fp is properly passed in

Behaviour: 
   if there is a `noise word' remaining in fp then
      Store that word from in a static buffer and return its address.
      Words longer than KWMAXNOISEWORD characters are truncated.

Outputs: result = address to noise word
--------------------------

--------------------------
Class Method WTInit
--------------------------
Inputs: noiseWdFileName

Exceptions: noiseWdFileName is unreadable
            file cannot open
            cannot allocate wordList memory
            
            
Assumptions: noiseWdFileName is properly passed in
             nosieWdFileName exists
             The file specified by noiseWdFileName
               (a) contains one word per line
               (b) is sorted in strictly ascending order

Behaviour: Return true if s is one of the words stored and 
           false otherwise, ignoring case. 
           Words longer than 15 characters are truncated

Outputs: KWSUCCESS = 0
--------------------------

--------------------------
Class Method WTIsMember
--------------------------
Inputs: s = pointer to char array

Exceptions: s is less than wordList[mid]
            s is greater than wordList[mid]

Assumptions: s is initialized properly

Behaviour:  splits the wordList in half and compares s with each mid value.
               if s is less than the mid, move the upper bound and recalculate.
               if s is the same, word found and return 1.
               else, s is greater so move the lower bound up and recalculate.
            if traversal reaches the end of the list (low > high)
               return 0

Outputs: 1 if word is found
         0 if word is not found
--------------------------

--------------------------
Class Method WTPrintState
--------------------------
Inputs: None

Exceptions: None

Assumptions: wordList is initialized

Behaviour: Print contents of wordList to screen.

Outputs: None
--------------------------

tablength: 3 spaces
