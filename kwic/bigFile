Canada
From Wikipedia, the free encyclopedia
For other uses, see Canada (disambiguation).
Page semi-protected
Canada
Vertical triband (red, white, red) with a red maple leaf in the centre
Flag
Motto: "A Mari Usque Ad Mare" (Latin)
"From Sea to Sea"
Anthem: "O Canada"
MENU0:00

Royal anthem: "God Save the Queen"[1][2]
Projection of North America with Canada in green
Capital	Ottawa
45°24′N 75°40′W
Largest city	Toronto
Official languages	
English French
Ethnic groups	
76.7% White
14.2% Asian
4.3% Aboriginal
2.9% Black
1.2% Latin America
0.5% Multiracial
0.3% Other
Demonym	Canadian
Government	Federal Parliamentary
Constitutional Monarchy[3]
 - 	Monarch	Elizabeth II
 - 	Governor General	David Johnston
 - 	Prime Minister	Stephen Harper
 - 	Chief Justice	Beverley McLachlin
Legislature	Parliament
 - 	Upper house	Senate
 - 	Lower house	House of Commons
Establishment from the United Kingdom
 - 	Constitution Act	July 1, 1867 
 - 	Statute of Westminster	December 11, 1931 
 - 	Canada Act	April 17, 1982 
Area
 - 	Total	9,984,670 km2 (2nd)
3,854,085 sq mi
 - 	Water (%)	8.92 (891,163 km2 / 344,080 mi2)
Population
 - 	2013 census	35,158,300[4] (37th)
 - 	Density	3.41/km2 (228th)
8.3/sq mi
GDP (PPP)	2013 estimate
 - 	Total	$1.518 trillion[5] (13th)
 - 	Per capita	$43,146[5] (9th)
GDP (nominal)	2013 estimate
 - 	Total	$1.825 trillion[5] (10th)
 - 	Per capita	$51,871[5] (10th)
Gini (2005)	32.1[6]
medium · 103rd[7]
HDI (2013)	Increase 0.911[8]
very high · 11th
Currency	Canadian dollar ($) (CAD)
Time zone	(UTC−3.5 to −8)
 - 	Summer (DST)	 (UTC−2.5 to −7)
Date format	
dd-mm-yyyy
mm-dd-yyyy
yyyy-mm-dd (CE)
Drives on the	right
Calling code	+1
ISO 3166 code	CA
Internet TLD	.ca
Canada Listeni/ˈkænədə/ is a country in North America consisting of 10 provinces and 3 territories. Located in the northern part of the continent, it extends from the Atlantic to the Pacific and northward into the Arctic Ocean. At 9.98 million square kilometers in total, Canada is the world's second-largest country by total area, and its common border with the United States is the world's longest land border shared by the same two countries.
The land that is now Canada has been inhabited for millennia by various Aboriginal peoples. Beginning in the late 15th century, British and French colonial expeditions explored, and later settled, the region's Atlantic coast. France ceded nearly all of its colonies in North America to the United Kingdom in 1763 after the French and Indian War, which was essentially the North American theatre of the Seven Years' War. The population grew steadily in subsequent decades, the territory was explored and additional self-governing Crown colonies were established. On July 1, 1867, three colonies federated, forming a federal dominion that established Canada.
Canada is a federal parliamentary democracy and a constitutional monarchy, with Queen Elizabeth II as its head of state. The country is officially bilingual at the federal level. It is one of the world's most ethnically diverse and multicultural nations, the product of large-scale immigration from many countries, with a population of approximately 35 million as of December 2012. Its advanced economy is one of the largest in the world, relying chiefly upon its abundant natural resources and well-developed trade networks. Canada's long and complex relationship with the United States has had a significant impact on its economy and culture.
Canada is a developed country and one of the wealthiest in the world, with the eighth highest per capita income globally, and the eleventh highest ranking in the Human Development Index. It ranks among the highest in international measurements of education, government transparency, civil liberties, quality of life, and economic freedom. Canada is a recognized middle power and a member of G7, G8, G20, International Covenant on Civil and Political Rights, NATO, North American Free Trade Agreement, Organisation for Economic Co-operation and Development (OECD), World Trade Organization, Commonwealth of Nations, Francophonie, Organization of American States, Asia-Pacific Economic Cooperation, and the United Nations.[9]
Contents  [hide] 
1 Etymology
2 History
2.1 Aboriginal peoples
2.2 European colonization
2.3 Confederation and expansion
2.4 Early 20th century
2.5 Modern times
3 Geography
4 Government and politics
4.1 Law
4.2 Foreign relations and military
4.3 Provinces and territories
5 Economy
5.1 Science and technology
6 Demographics
6.1 Language
7 Culture
8 See also
9 References
10 Further reading
11 External links
Etymology

Main article: Name of Canada
The name Canada comes from the St. Lawrence Iroquoian word kanata, meaning "village" or "settlement".[10] In 1535, indigenous inhabitants of the present-day Quebec City region used the word to direct French explorer Jacques Cartier to the village of Stadacona.[11] Cartier later used the word Canada to refer not only to that particular village, but the entire area subject to Donnacona (the chief at Stadacona); by 1545, European books and maps had begun referring to this region as Canada.[11]
In the 17th and early 18th centuries, "Canada" referred to the part of New France that lay along the St. Lawrence River and the northern shores of the Great Lakes. The area was later split into two British colonies, Upper Canada and Lower Canada. They were reunified as the Province of Canada in 1841.[12]
Upon Confederation in 1867, Canada was adopted as the legal name for the new country, and the word Dominion was conferred as the country's title.[13] However, as Canada asserted its political autonomy from the United Kingdom, the federal government increasingly used simply Canada on state documents and treaties, a change that was reflected in the renaming of the national holiday from Dominion Day to Canada Day in 1982.[14]
History

Main article: History of Canada
Further information: List of years in Canada
Aboriginal peoples
Archaeological studies and genetic analyses have indicated a human presence in the northern Yukon region from 24,500 BC, and in southern Ontario from 7500 BC.[15][16][17] The Paleo-Indian archeological sites at Old Crow Flats and Bluefish Caves are two of the oldest sites of human habitation in Canada.[18] The characteristics of Canadian Aboriginal societies included permanent settlements, agriculture, complex societal hierarchies, and trading networks.[19][20] Some of these cultures had collapsed by the time European explorers arrived in the late 15th and early 16th centuries, and have only been discovered through archeological investigations.[21]
The aboriginal population at the time of the first European settlements is estimated to have been between 200,000[22] and two million,[23] with a figure of 500,000 accepted by Canada's Royal Commission on Aboriginal Health.[24] As a consequence of the European colonization, Canada's aboriginal peoples suffered from repeated outbreaks of newly introduced infectious diseases such as influenza, measles, and smallpox (to which they had no natural immunity), resulting in a forty- to eighty-percent population decrease in the centuries after the European arrival.[22] Aboriginal peoples in present-day Canada include the First Nations,[25] Inuit,[26] and Métis.[27] The Métis are a mixed-blood people who originated in the mid-17th century when First Nations and Inuit people married European settlers.[28] In general, the Inuit had more limited interaction with European settlers during the colonization period.[29]
European colonization


Benjamin West's The Death of General Wolfe (1771) dramatizes James Wolfe's death during the Battle of the Plains of Abraham at Quebec in 1759.
The first known attempt at European colonization began when Norsemen settled briefly at L'Anse aux Meadows in Newfoundland around 1000 AD.[30] No further European exploration occurred until 1497, when Italian seafarer John Cabot explored Canada's Atlantic coast for England.[31] Basque and Portuguese mariners established seasonal whaling and fishing outposts along the Atlantic coast in the early 16th century.[32] In 1534, French explorer Jacques Cartier explored the St. Lawrence River, where on July 24 he planted a 10-metre (33 ft) cross bearing the words "Long Live the King of France", and took possession of the territory in the name of King Francis I.[33]
In 1583, Sir Humphrey Gilbert claimed St. John's, Newfoundland, as the first North American English colony by the royal prerogative of Queen Elizabeth I.[34] French explorer Samuel de Champlain arrived in 1603, and established the first permanent European settlements at Port Royal in 1605 and Quebec City in 1608.[35] Among the French colonists of New France, Canadiens extensively settled the St. Lawrence River valley and Acadians settled the present-day Maritimes, while fur traders and Catholic missionaries explored the Great Lakes, Hudson Bay, and the Mississippi watershed to Louisiana. The Beaver Wars broke out in the mid-17th century over control of the North American fur trade.[36]
The English established additional colonies in Cupids and Ferryland, Newfoundland, beginning in 1610.[37] The Thirteen Colonies to the south were founded soon after.[32] A series of four wars erupted in colonial North America between 1689 and 1763; the later wars of the period constituted the North American theatre of the Seven Years' War.[38] Mainland Nova Scotia came under British rule with the 1713 Treaty of Utrecht; the Treaty of Paris (1763) ceded Canada and most of New France to Britain after the Seven Years' War.[39]
The Royal Proclamation of 1763 created the Province of Quebec out of New France, and annexed Cape Breton Island to Nova Scotia.[14] St. John's Island (now Prince Edward Island) became a separate colony in 1769.[40] To avert conflict in Quebec, the British passed the Quebec Act of 1774, expanding Quebec's territory to the Great Lakes and Ohio Valley. It re-established the French language, Catholic faith, and French civil law there. This angered many residents of the Thirteen Colonies, fuelling anti-British sentiment in the years prior to the 1775 outbreak of the American Revolution.[14]
The 1783 Treaty of Paris recognized American independence and ceded territories south of the Great Lakes to the United States.[41] New Brunswick was split from Nova Scotia as part of a reorganization of Loyalist settlements in the Maritimes. To accommodate English-speaking Loyalists in Quebec, the Constitutional Act of 1791 divided the province into French-speaking Lower Canada (later Quebec) and English-speaking Upper Canada (later Ontario), granting each its own elected legislative assembly.[42]


Robert Harris's Fathers of Confederation (1884), an amalgamation of the Charlottetown and Quebec conferences of 1864.[43]
The Canadas were the main front in the War of 1812 between the United States and Britain. Following the war, large-scale immigration to Canada from Britain and Ireland began in 1815.[23] Between 1825 and 1846, 626,628 European immigrants reportedly landed at Canadian ports.[44] These included Irish immigrants escaping the Great Irish Famine as well as Gaelic-speaking Scots displaced by the Highland Clearances.[45] Between one-quarter and one-third of all Europeans who immigrated to Canada before 1891 died of infectious diseases.[22]
The desire for responsible government resulted in the abortive Rebellions of 1837. The Durham Report subsequently recommended responsible government and the assimilation of French Canadians into English culture.[14] The Act of Union 1840 merged the Canadas into a united Province of Canada. Responsible government was established for all British North American provinces by 1849.[46] The signing of the Oregon Treaty by Britain and the United States in 1846 ended the Oregon boundary dispute, extending the border westward along the 49th parallel. This paved the way for British colonies on Vancouver Island (1849) and in British Columbia (1858).[47]
Confederation and expansion
refer to caption

An animated map showing the growth and change of Canada's provinces and territories since Confederation in 1867
Following several constitutional conferences, the 1867 Constitution Act officially proclaimed Canadian Confederation on July 1, 1867, initially with four provinces – Ontario, Quebec, Nova Scotia, and New Brunswick.[48][49][50] Canada assumed control of Rupert's Land and the North-Western Territory to form the Northwest Territories, where the Métis' grievances ignited the Red River Rebellion and the creation of the province of Manitoba in July 1870.[51] British Columbia and Vancouver Island (which had been united in 1866) joined the Confederation in 1871, while Prince Edward Island joined in 1873.[52]
Prime Minister John A. Macdonald and his Conservative government established a National Policy of tariffs to protect the nascent Canadian manufacturing industries.[50] To open the West, the government sponsored the construction of three transcontinental railways (including the Canadian Pacific Railway), opened the prairies to settlement with the Dominion Lands Act, and established the North-West Mounted Police to assert its authority over this territory.[53][54] In 1898, during the Klondike Gold Rush in the Northwest Territories, the Canadian government created the Yukon Territory. Under the Liberal Prime Minister Wilfrid Laurier, continental European immigrants settled the prairies, and Alberta and Saskatchewan became provinces in 1905.[52]
Early 20th century
Group of armed soldiers march past a wrecked tank and a body

Canadian soldiers and a Mark II tank at the Battle of Vimy Ridge in 1917
Because Britain still maintained control of Canada's foreign affairs under the Confederation Act, its declaration of war in 1914 automatically brought Canada into World War I. Volunteers sent to the Western Front later became part of the Canadian Corps. The Corps played a substantial role in the Battle of Vimy Ridge and other major engagements of the war.[55] Out of approximately 625,000 Canadians who served in World War I, around 60,000 were killed and another 173,000 were wounded.[56] The Conscription Crisis of 1917 erupted when conservative Prime Minister Robert Borden brought in compulsory military service over the vehement objections of French-speaking Quebecers. The Conscription Crisis of 1917, coupled with disputes over French language schools outside Quebec, deeply alienated Francophone Canadians and temporarily split the Liberal Party. Bordon's Unionist government included many Anglophone Liberals, and it swept to a landslide victory in the 1917 elections. In 1919, Canada joined the League of Nations independently of Britain,[55] the 1931 Statute of Westminster affirmed Canada's independence.[3]
The great depression in Canada during the early 1930s saw an economic downturn, leading to hardship across the country.[57] In response to the downturn, the Co-operative Commonwealth Federation (CCF) in Saskatchewan introduced many elements of a welfare state (as pioneered by Tommy Douglas) in the 1940s and 1950s.[58] Canada declared war on Germany independently during World War II under Liberal Prime Minister William Lyon Mackenzie King, three days after Britain. The first Canadian Army units arrived in Britain in December 1939.[55]
Canadian troops played important roles in many key battles of the war, including the failed 1942 Dieppe Raid, the Allied invasion of Italy, the Normandy landings, the Battle of Normandy, and the Battle of the Scheldt in 1944.[55] Canada provided asylum for the Dutch monarchy while that country was occupied, and is credited by the Netherlands for major contributions to its liberation from Nazi Germany.[59] The Canadian economy boomed during the war as its industries manufactured military materiel for Canada, Britain, China, and the Soviet Union.[55] Despite another Conscription Crisis in Quebec in 1944, Canada finished the war with a large army and strong economy.[60]
Modern times


At Rideau Hall, Governor General the Viscount Alexander of Tunis (centre) receives the bill finalizing the union of Newfoundland and Canada on March 31, 1949
The Dominion of Newfoundland (now Newfoundland and Labrador) was unified with Canada in 1949.[61]
Canada's post-war economic growth, combined with the policies of successive Liberal governments, led to the emergence of a new Canadian identity, marked by the adoption of the current Maple Leaf Flag in 1965,[62] the implementation of official bilingualism (English and French) in 1969,[63] and the institution of official multiculturalism in 1971.[64] Socially democratic programs were also instituted, such as Medicare, the Canada Pension Plan, and Canada Student Loans, though provincial governments, particularly Quebec and Alberta, opposed many of these as incursions into their jurisdictions.[65]
Finally, another series of constitutional conferences resulted in the 1982 patriation of Canada's constitution from the United Kingdom, concurrent with the creation of the Canadian Charter of Rights and Freedoms.[66] In 1999, Nunavut became Canada's third territory after a series of negotiations with the federal government.[67]
At the same time, Quebec underwent profound social and economic changes through the Quiet Revolution of the 1960s, giving birth to a modern nationalist movement. The radical Front de libération du Québec (FLQ) ignited the October Crisis with a series of bombings and kidnappings in 1970,[68] and the sovereignist Parti Québécois was elected in 1976, organizing an unsuccessful referendum on sovereignty-association in 1980. Attempts to accommodate Quebec nationalism constitutionally through the Meech Lake Accord failed in 1990.[69] This led to the formation of the Bloc Québécois in Quebec and the invigoration of the Reform Party of Canada in the West.[70][71] A second referendum followed in 1995, in which sovereignty was rejected by a slimmer margin of 50.6 to 49.4 percent. In 1997, the Supreme Court ruled that unilateral secession by a province would be unconstitutional, and the Clarity Act was passed by parliament, outlining the terms of a negotiated departure from Confederation.[69]
In addition to the issues of Quebec sovereignty, a number of crises shook Canadian society in the late 1980s and early 1990s. These included the explosion of Air India Flight 182 in 1985, the largest mass murder in Canadian history;[72] the École Polytechnique massacre in 1989, a university shooting targeting female students;[73] and the Oka Crisis of 1990,[74] the first of a number of violent confrontations between the government and Aboriginal groups.[75] Canada also joined the Gulf War in 1990 as part of a US-led coalition force, and was active in several peacekeeping missions in the 1990s, including the UNPROFOR mission in the former Yugoslavia.[76][77] Canada sent troops to Afghanistan in 2001, but declined to join the US-led invasion of Iraq in 2003.[78] In 2009, Canada's economy suffered in the worldwide Great Recession, but it has since rebounded modestly.[79] In 2011, Canadian forces participated in the NATO-led intervention into the Libyan civil war.[80]
Geography

Main article: Geography of Canada
Canada occupies a major northern portion of North America, sharing land borders with the contiguous United States to the south (the longest border between two countries in the world) and the US state of Alaska to the northwest. Canada stretches from the Atlantic Ocean in the east to the Pacific Ocean in the west; to the north lies the Arctic Ocean.[81][82] Greenland is to the northeast, while Saint Pierre and Miquelon is south of Newfoundland. By total area (including its waters), Canada is the second-largest country in the world, after Russia. By land area alone, Canada ranks fourth.[82] The country lies between latitudes 41° and 84°N, and longitudes 52° and 141°W.


A satellite composite image of Canada. Boreal forests prevail on the rocky Canadian Shield, while ice and tundra are prominent in the Arctic. Glaciers are visible in the Canadian Rockies and Coast Mountains. The flat and fertile prairies facilitate agriculture. The Great Lakes feed the St. Lawrence River in the southeast, where lowlands host much of Canada's population.
Since 1925, Canada has claimed the portion of the Arctic between 60° and 141°W longitude,[83] but this claim is not universally recognized. Canada is home to the world's northernmost settlement, Canadian Forces Station Alert, on the northern tip of Ellesmere Island – latitude 82.5°N – which lies 817 kilometres (508 mi) from the North Pole.[84] Much of the Canadian Arctic is covered by ice and permafrost. Canada has the longest coastline in the world, with a total length of 202,080 kilometres (125,570 mi);[82] additionally, its border with the United States is the world's longest land border, stretching 8,891 kilometres (5,525 mi).[85]
Since the end of the last glacial period, Canada has consisted of eight distinct forest regions, including extensive boreal forest on the Canadian Shield.[86] Canada has around 31,700 large lakes,[87] more than any other country, containing much of the world's fresh water.[88] There are also fresh-water glaciers in the Canadian Rockies and the Coast Mountains. Canada is geologically active, having many earthquakes and potentially active volcanoes, notably Mount Meager, Mount Garibaldi, Mount Cayley, and the Mount Edziza volcanic complex.[89] The volcanic eruption of the Tseax Cone in 1775 was among Canada's worst natural disasters, killing 2,000 Nisga'a people and destroying their village in the Nass River valley of northern British Columbia. The eruption produced a 22.5-kilometre (14.0 mi) lava flow, and, according to Nisga'a legend, blocked the flow of the Nass River.[90]
Canada's population density, at 3.3 inhabitants per square kilometre (8.5 /sq mi), is among the lowest in the world. The most densely populated part of the country is the Quebec City – Windsor Corridor, situated in Southern Quebec and Southern Ontario along the Great Lakes and the St. Lawrence River.[91]
Average winter and summer high temperatures across Canada vary from region to region. Winters can be harsh in many parts of the country, particularly in the interior and Prairie provinces, which experience a continental climate, where daily average temperatures are near −15 °C (5 °F), but can drop below −40 °C (−40 °F) with severe wind chills.[92] In noncoastal regions, snow can cover the ground for almost six months of the year, while in parts of the north snow can persist year-round. Coastal British Columbia has a temperate climate, with a mild and rainy winter. On the east and west coasts, average high temperatures are generally in the low 20s °C (70s °F), while between the coasts, the average summer high temperature ranges from 25 to 30 °C (77 to 86 °F), with temperatures in some interior locations occasionally exceeding 40 °C (104 °F).[93]
Government and politics

Main articles: Government of Canada and Politics of Canada
A building with a central clocktower rising from a block

Parliament Hill in Canada's capital city, Ottawa
Canada has a parliamentary system within the context of a constitutional monarchy, the monarchy of Canada being the foundation of the executive, legislative, and judicial branches.[94][95][96][97] The sovereign is Queen Elizabeth II, who also serves as head of state of 15 other Commonwealth countries and each of Canada's ten provinces. As such, the Queen's representative, the Governor General of Canada (at present David Lloyd Johnston), carries out most of the federal royal duties in Canada.[98][99]
The direct participation of the royal and viceroyal figures in areas of governance is limited.[96][100][101] In practice, their use of the executive powers is directed by the Cabinet, a committee of ministers of the Crown responsible to the elected House of Commons and chosen and headed by the Prime Minister of Canada (at present Stephen Harper),[102] the head of government. The governor general or monarch may, though, in certain crisis situations exercise their power without ministerial advice.[100] To ensure the stability of government, the governor general will usually appoint as prime minister the person who is the current leader of the political party that can obtain the confidence of a plurality in the House of Commons.[103] The Prime Minister's Office (PMO) is thus one of the most powerful institutions in government, initiating most legislation for parliamentary approval and selecting for appointment by the Crown, besides the aforementioned, the governor general, lieutenant governors, senators, federal court judges, and heads of Crown corporations and government agencies.[100] The leader of the party with the second-most seats usually becomes the Leader of Her Majesty's Loyal Opposition (presently Thomas Mulcair) and is part of an adversarial parliamentary system intended to keep the government in check.[104]


The Senate chamber within the Centre Block on Parliament Hill
Each of the 308 members of parliament in the House of Commons is elected by simple plurality in an electoral district or riding. General elections must be called by the governor general, either on the advice of the prime minister, within four years of the previous election, or if the government loses a confidence vote in the House.[105] The 105 members of the Senate, whose seats are apportioned on a regional basis, serve until age 75.[106] Five parties had representatives elected to the federal parliament in the 2011 elections: the Conservative Party of Canada (governing party), the New Democratic Party (the Official Opposition), the Liberal Party of Canada, the Bloc Québécois, and the Green Party of Canada. The list of historical parties with elected representation is substantial.
Canada's federal structure divides government responsibilities between the federal government and the ten provinces. Provincial legislatures are unicameral and operate in parliamentary fashion similar to the House of Commons.[101] Canada's three territories also have legislatures, but these are not sovereign and have fewer constitutional responsibilities than the provinces.[107] The territorial legislatures also differ structurally from their provincial counterparts.[108]
Law
Main article: Law of Canada
The Constitution of Canada is the supreme law of the country, and consists of written text and unwritten conventions. The Constitution Act, 1867 (known as the British North America Act prior to 1982), affirmed governance based on parliamentary precedent and divided powers between the federal and provincial governments. The Statute of Westminster 1931 granted full autonomy and the Constitution Act, 1982, ended all legislative ties to the UK, as well as adding a constitutional amending formula and the Canadian Charter of Rights and Freedoms. The Charter guarantees basic rights and freedoms that usually cannot be over-ridden by any government—though a notwithstanding clause allows the federal parliament and provincial legislatures to override certain sections of the Charter for a period of five years.[109]
Two sides of a silver medal: the profile of Queen Victoria and the inscription "Victoria Regina" on one side, a man in European garb shaking hands with an Aboriginal with the inscription Indian Treaty No. 187 on the other

The Indian Chiefs Medal, presented to commemorate the Numbered Treaties of 1871–1921
Although not without conflict, European Canadians' early interactions with First Nations and Inuit populations were relatively peaceful.[110] The Crown and Aboriginal peoples began interactions during the European colonialization period. The Indian Act, various treaties and case laws were established to mediate relations between Europeans and native peoples.[111] Most notably, a series of eleven treaties known as the Numbered Treaties were signed between Aboriginals in Canada and the reigning Monarch of Canada between 1871 and 1921.[112] These treaties are agreements with the Canadian Crown-in-Council, administered by Canadian Aboriginal law, and overseen by the Minister of Aboriginal Affairs and Northern Development. The role of the treaties and the rights they support were reaffirmed by Section Thirty-five of the Constitution Act, 1982.[111] These rights may include provision of services such as health care, and exemption from taxation.[113] The legal and policy framework within which Canada and First Nations operate was further formalized in 2005, through the First Nations–Federal Crown Political Accord.[111]


The Supreme Court of Canada in Ottawa, west of Parliament Hill
Canada's judiciary plays an important role in interpreting laws and has the power to strike down Acts of Parliament that violate the constitution. The Supreme Court of Canada is the highest court and final arbiter and has been led since 2000 by the Chief Justice Beverley McLachlin (the first female Chief Justice).[114] Its nine members are appointed by the governor general on the advice of the prime minister and minister of justice. All judges at the superior and appellate levels are appointed after consultation with nongovernmental legal bodies. The federal Cabinet also appoints justices to superior courts in the provincial and territorial jurisdictions.[115]
Common law prevails everywhere except in Quebec, where civil law predominates. Criminal law is solely a federal responsibility and is uniform throughout Canada.[116] Law enforcement, including criminal courts, is officially a provincial responsibility, conducted by provincial and municipal police forces.[117] However, in most rural areas and some urban areas, policing responsibilities are contracted to the federal Royal Canadian Mounted Police.[118]
Foreign relations and military
Main articles: Foreign relations of Canada and Military history of Canada


Prime Minister Stephen Harper meeting President of the United States Barack Obama in 2009
Canada currently employs a professional, volunteer military force of 65,000 regular personnel and approximately 53,000 reserve personnel, including supplementary reserves and civilian employees.[119] The unified Canadian Forces (CF) comprise the Canadian Army, Royal Canadian Navy, and Royal Canadian Air Force. In 2011, Canada's military expenditure totalled approximately C$24.5 billion.[120]
Canada and the United States share the world's longest undefended border, co-operate on military campaigns and exercises, and are each other's largest trading partner.[121] Canada nevertheless has an independent foreign policy, most notably maintaining full relations with Cuba and declining to officially participate in the 2003 invasion of Iraq. Canada also maintains historic ties to the United Kingdom and France and to other former British and French colonies through Canada's membership in the Commonwealth of Nations and the Francophonie.[122] Canada is noted for having a positive relationship with the Netherlands, owing, in part, to its contribution to the Dutch liberation during World War II.[59]
Canada's strong attachment to the British Empire and Commonwealth led to major participation in British military efforts in the Second Boer War, World War I and World War II. Since then, Canada has been an advocate for multilateralism, making efforts to resolve global issues in collaboration with other nations.[123][124] Canada was a founding member of the United Nations in 1945 and of NATO in 1949. During the Cold War, Canada was a major contributor to UN forces in the Korean War and founded the North American Aerospace Defense Command (NORAD) in co-operation with the United States to defend against potential aerial attacks from the Soviet Union.[125]


Canadian Army soldiers from the Royal 22nd Regiment deploying during UNITAS exercises in April 2009
During the Suez Crisis of 1956, future Prime Minister Lester B. Pearson eased tensions by proposing the inception of the United Nations Peacekeeping Force, for which he was awarded the 1957 Nobel Peace Prize.[126] As this was the first UN peacekeeping mission, Pearson is often credited as the inventor of the concept. Canada has since served in 50 peacekeeping missions, including every UN peacekeeping effort until 1989,[55] and has since maintained forces in international missions in Rwanda, the former Yugoslavia, and elsewhere; Canada has sometimes faced controversy over its involvement in foreign countries, notably in the 1993 Somalia Affair.[127]
Canada joined the Organization of American States (OAS) in 1990 and hosted the OAS General Assembly in Windsor, Ontario, in June 2000 and the third Summit of the Americas in Quebec City in April 2001.[128] Canada seeks to expand its ties to Pacific Rim economies through membership in the Asia-Pacific Economic Cooperation forum (APEC).[129]


The Halifax-class frigate HMCS Regina, a warship of the Royal Canadian Navy, near Hawaii during the 2004 RIMPAC exercises
In 2001, Canada deployed troops to Afghanistan as part of the US stabilization force and the UN-authorized, NATO-led International Security Assistance Force. Starting in July 2011, Canada began withdrawing its troops from Afghanistan. In all, Canada lost 158 soldiers, one diplomat, two aid workers, and one journalist during the mission,[130] which cost approximately C$11.3 billion.[131]
In February 2007, Canada, Italy, the United Kingdom, Norway, and Russia announced their joint commitment to a $1.5-billion project to help develop vaccines for developing nations, and called on other countries to join them.[132] In August 2007, Canada's territorial claims in the Arctic were challenged after a Russian underwater expedition to the North Pole; Canada has considered that area to be sovereign territory since 1925.[133] Between March and October 2011, Canadian forces participated in a UN-mandated NATO intervention into the 2011 Libyan civil war.[134]
Provinces and territories
Main article: Provinces and territories of Canada
See also: Canadian federalism
Canada is a federation composed of ten provinces and three territories. In turn, these may be grouped into four main regions: Western Canada, Central Canada, Atlantic Canada, and Northern Canada ("Eastern Canada" refers to Central Canada and Atlantic Canada together). Provinces have more autonomy than territories, having responsibility for social programs such as health care, education, and welfare. Together, the provinces collect more revenue than the federal government, an almost unique structure among federations in the world. Using its spending powers, the federal government can initiate national policies in provincial areas, such as the Canada Health Act; the provinces can opt out of these, but rarely do so in practice. Equalization payments are made by the federal government to ensure that reasonably uniform standards of services and taxation are kept between the richer and poorer provinces.[135]
A clickable map of Canada exhibiting its ten provinces and three territories, and their capitals.
 A clickable map of Canada exhibiting its ten provinces and three territories, and their capitals.
About this image
Economy

Main article: Economy of Canada


Nations that have Free Trade Agreements with Canada as of 2009 are in dark blue, while nations in negotiations are in cyan. Canada is green.
The Bank of Canada is the central bank of the country and governed by Stephen Poloz. In addition, the Minister of Finance and Ministry of Industry utilize the Statistics Canada system for financial planning. The Toronto Stock Exchange is the seventh largest exchange in the world having 1,577 companies listed in 2012. Canada is the world's eleventh-largest economy, with a 2012 nominal GDP of approximately US$1.82 trillion.[5] It is a member of the Organisation for Economic Co-operation and Development (OECD) and the G8, and is one of the world's top ten trading nations, with a highly globalized economy.[136][137] Canada is a mixed economy, ranking above the US and most western European nations on the Heritage Foundation's index of economic freedom,[138] and experiencing a relatively low level of income disparity.[139] In 2008, Canada's imported goods were worth over $442.9 billion, of which $280.8 billion originated from the United States, $11.7 billion from Japan, and $11.3 billion from the United Kingdom.[140] The country's 2009 trade deficit totalled C$4.8 billion, compared with a C$46.9 billion surplus in 2008.[141]
Since the early 20th century, the growth of Canada's manufacturing, mining, and service sectors has transformed the nation from a largely rural economy to an urbanized, industrial one. Like many other First World nations, the Canadian economy is dominated by the service industry, which employs about three-quarters of the country's workforce.[142] However, Canada is unusual among developed countries in the importance of its primary sector, in which the logging and petroleum industries are two of the most prominent components.[143]
Canada is one of the few developed nations that are net exporters of energy.[144] Atlantic Canada possesses vast offshore deposits of natural gas, and Alberta also hosts large oil and gas resources. The vastness of the Athabasca oil sands and other assets results in Canada having 13% of the global oil reserves, the world's third-largest, after Venezuela and Saudi Arabia.[145] Canada is additionally one of the world's largest suppliers of agricultural products; the Canadian Prairies are one of the most important global producers of wheat, canola, and other grains.[146] The Ministry of Natural Resources in Canada provides statistics regarding their major exports, zinc and uranium, and is a leading exporter of many other minerals, such as gold, nickel, aluminum, steel, iron ore, Coking Coal, and lead.[144][147][148] Many towns in northern Canada, where agriculture is difficult, are sustainable because of nearby mines or sources of timber. Canada also has a sizeable manufacturing sector centred in southern Ontario and Quebec, with automobiles and aeronautics representing particularly important industries.[149]


Representatives of the governments of Canada, Mexico, and the United States sign the North American Free Trade Agreement (NAFTA) in 1992.
Canada's economic integration with the United States has increased significantly since World War II. The Automotive Products Trade Agreement of 1965 opened Canada's borders to trade in the automobile manufacturing industry. In the 1970s, concerns over energy self-sufficiency and foreign ownership in the manufacturing sectors prompted Prime Minister Pierre Trudeau's Liberal government to enact the National Energy Program (NEP) and the Foreign Investment Review Agency (FIRA).[150] In the 1980s, Prime Minister Brian Mulroney's Progressive Conservatives abolished the NEP and changed the name of FIRA to "Investment Canada", to encourage foreign investment.[151] The Canada – United States Free Trade Agreement (FTA) of 1988 eliminated tariffs between the two countries, while the North American Free Trade Agreement (NAFTA) expanded the free-trade zone to include Mexico in 1994.[146] In the mid-1990s, Jean Chrétien's Liberal government began to post annual budgetary surpluses, and steadily paid down the national debt.[152]
The global financial crisis of 2008 caused a major recession, which led to a significant rise in unemployment in Canada.[153] By October 2009, Canada's national unemployment rate had reached 8.6 percent, with provincial unemployment rates varying from a low of 5.8 percent in Manitoba to a high of 17 percent in Newfoundland and Labrador.[154] Between October 2008 and October 2010, the Canadian labour market lost 162,000 full-time jobs and a total of 224,000 permanent jobs.[155] Canada's federal debt was estimated to total $566.7 billion for the fiscal year 2010–11, up from $463.7 billion in 2008–09.[156] In addition, Canada's net foreign debt rose by $41 billion to $194 billion in the first quarter of 2010.[157] However, Canada's regulated banking sector (comparatively conservative among G8 nations), the federal government's pre-crisis budgetary surpluses, and its long-term policies of lowering the national debt, resulted in a less severe recession compared to other G8 nations.[158] As of 2013, the majority of the Canadian economy has stabilized, although the country remains troubled by slow growth, sensitivity to the Eurozone crisis and higher-than-normal unemployment rates.[5][159][160][161][162] The federal government and many Canadian industries have also started to expand trade with emerging Asian markets, in an attempt to diversify exports; in 2011, Asia was Canada's second-largest export market, after the United States.[163][164] Widely debated oil pipeline proposals, in particular, are hoped to increase exports of Canadian oil reserves to China.[165][166]
Science and technology
Main articles: Science and technology in Canada and Telecommunications in Canada
A shuttle in space, with Earth in the background. A mechanical arm labelled "Canada" rises from the shuttle

The Canadarm robotic manipulator in action on Space Shuttle Discovery during the STS-116 mission in 2006.
In 2011, Canada spent approximately C$29.9 billion on domestic research and development.[167] As of 2012, the country has produced fourteen Nobel laureates in physics, chemistry and medicine,[168] and was ranked fourth worldwide for scientific research quality in a major 2012 survey of international scientists.[169] It is additionally home to a number of global technology firms.[170] Canada ranks seventeenth in the world for Internet users as a proportion of the population, with over 28.4 million users, equivalent to around 83 percent of its total 2012 population.[171]
The Canadian Space Agency operates a highly active space program, conducting deep-space, planetary, and aviation research, and developing rockets and satellites. Canada was the third country to launch a satellite into space after the USSR and the United States, with the 1962 Alouette 1 launch.[172] In 1984, Marc Garneau became Canada's first astronaut. As of 2013, nine Canadians have flown into space, over the course of fifteen manned missions.[173]
Canada is a participant in the International Space Station (ISS), and is a pioneer in space robotics, having constructed the Canadarm, Canadarm2 and Dextre robotic manipulators for the ISS and NASA's Space Shuttle. Since the 1960s, Canada's aerospace industry has designed and built numerous marques of satellite, including Radarsat-1 and 2, ISIS and MOST.[174] Canada has also produced a successful and widely used sounding rocket, the Black Brant; over 1,000 Black Brants have been launched since the rocket's introduction in 1961.[175]
Demographics

Main article: Demographics of Canada
The 2011 Canadian census counted a total population of 33,476,688, an increase of around 5.9 percent over the 2006 figure.[176][177] By December 2012, Statistics Canada reported a population of over 35 million, signifying the fastest growth rate of any G8 nation.[178] Between 1990 and 2008, the population increased by 5.6 million, equivalent to 20.4 percent overall growth. The main drivers of population growth are immigration and, to a lesser extent, natural growth.


Map of the dominant self-identified ethnic origins of ancestors per census division of 2006.
  Canadian
  English
  French
  Scottish
  German
  Italian
  First Nations
  Ukrainian
  East Indian
  Inuit
About four-fifths of the population lives within 150 kilometres (93 mi) of the United States border.[179] Approximately 80 percent of Canadians live in urban areas concentrated in the Quebec City–Windsor Corridor, the British Columbia Lower Mainland, and the Calgary–Edmonton Corridor in Alberta.[180] Canada spans latitudinally from the 83rd parallel north to the 41st parallel north, and approximately 95% of the population is found below the 55th parallel north. In common with many other developed countries, Canada is experiencing a demographic shift towards an older population, with more retirees and fewer people of working age. In 2006, the average age was 39.5 years;[181] by 2011, it had risen to approximately 39.9 years.[182] As of 2013, the average life expectancy for Canadians is 81 years.[8]
According to the 2006 census, the country's largest self-reported ethnic origin is Canadian (accounting for 32% of the population), followed by English (21%), French (15.8%), Scottish (15.1%), Irish (13.9%), German (10.2%), Italian (4.6%), Chinese (4.3%), First Nations (4.0%), Ukrainian (3.9%), and Dutch (3.3%).[183] There are 600 recognized First Nations governments or bands, encompassing a total of 1,172,790 people.[184]
Canada's aboriginal population is growing at almost twice the national rate, and four percent of Canada's population claimed aboriginal identity in 2006. Another 16.2 percent of the population belonged to a non-aboriginal visible minority.[185] The largest visible minority groups are South Asian (4.0%), Chinese (3.9%) and Black (2.5%). Between 2001 and 2006, the visible minority population rose by 27.2 percent.[186] In 1961, less than two percent of Canada's population (about 300,000 people) could be classified as belonging to a visible minority group, and less than one percent as aboriginal.[187] By 2007, almost one in five (19.8%) were foreign-born, with nearly 60 percent of new immigrants coming from Asia (including the Middle East).[188] The leading sources of immigrants to Canada were China, the Philippines and India.[189] According to Statistics Canada, visible minority groups could account for a third of the Canadian population by 2031.[190]
Canada has one of the highest per-capita immigration rates in the world,[191] driven by economic policy and family reunification. In 2010, a record 280,636 people immigrated to Canada.[192] The Canadian government anticipated between 240,000 and 265,000 new permanent residents in 2013,[193] a similar number of immigrants as in recent years.[194] New immigrants settle mostly in major urban areas like Toronto and Vancouver.[195] Canada also accepts large numbers of refugees,[196] accounting for over 10 percent of annual global refugee resettlements.[197]
Canada is religiously diverse, encompassing a wide range of beliefs and customs. According to the 2011 census, 67.3 percent of Canadians identify as Christian; of these, Catholics make up the largest group, accounting for 38.7 percent of the population. The largest Protestant denomination is the United Church of Canada (accounting for 6.1% of Canadians), followed by Anglicans (5.0%), and Baptists (1.9%). In 2011, about 23.9 percent declared no religious affiliation, compared to 16.5% in 2001.[198] The remaining 8.8 percent are affiliated with non-Christian religions, the largest of which are Islam (3.2%) and Hinduism (1.5%).[199]
Canadian provinces and territories are responsible for education. The mandatory school age ranges between 5–7 to 16–18 years,[200] contributing to an adult literacy rate of 99 percent.[82] As of 2011, 88 percent of adults aged 25 to 64 have earned the equivalent of a high-school degree, compared to an OECD average of 74 percent.[201] In 2002, 43 percent of Canadians aged 25 to 64 possessed a post-secondary education; for those aged 25 to 34, the rate of post-secondary education reached 51 percent.[202] According to a 2012 NBC report, Canada is the most educated country in the world.[203] The Programme for International Student Assessment indicates that Canadian students perform well above the OECD average, particularly in mathematics, science, and reading.[204][205]
Largest metropolitan areas in Canada by population (2011 Census)	 view talk edit
Name	Province	Population			Name	Province	Population	
Toronto	Ontario	5,583,064			London	Ontario	474,786
Montreal	Quebec	3,824,221			St. Catharines–Niagara	Ontario	392,184
Vancouver	British Columbia	2,313,328			Halifax	Nova Scotia	390,328
Ottawa–Gatineau	Ontario–Quebec	1,236,324			Oshawa	Ontario	356,177
Calgary	Alberta	1,214,839			Victoria	British Columbia	344,615
Edmonton	Alberta	1,159,869			Windsor	Ontario	319,246
Quebec	Quebec	765,706			Saskatoon	Saskatchewan	260,600
Winnipeg	Manitoba	730,018			Regina	Saskatchewan	210,556
Hamilton	Ontario	721,053			Sherbrooke	Quebec	201,890
Kitchener–Cambridge–Waterloo	Ontario	477,160			St. John's	Newfoundland and Labrador	196,966

Language
Main article: Languages of Canada
See also: List of endangered languages in Canada


Approximately 98% of Canadians can speak English and/or French.[206]
  English – 56.9%
  English and French (Bilingual) – 16.1%
  French – 21.3%
  Sparsely populated area ( < 0.4 persons per km2)
Canada's two official languages are English and French, pursuant to Section 16 of the Canadian Charter of Rights and Freedoms and the Federal Official Languages Act. Canada's federal government practices official bilingualism, which is applied by the Commissioner of Official Languages. English and French have equal status in federal courts, Parliament, and in all federal institutions. Citizens have the right, where there is sufficient demand, to receive federal government services in either English or French, and official-language minorities are guaranteed their own schools in all provinces and territories.[207]
English and French are the first languages of 59.7 and 23.2 percent of the population respectively. Approximately 98 percent of Canadians speak English or French: 57.8 percent speak English only, 22.1 percent speak French only, and 17.4 percent speak both.[206] The English and French official-language communities, defined by the first official language spoken, constitute 73.0 and 23.6 percent of the population respectively.[208]
The 1977 Charter of the French Language established French as the official language of Quebec.[209] Although more than 85 percent of French-speaking Canadians live in Quebec, there are substantial Francophone populations in Ontario, Alberta, and southern Manitoba; Ontario has the largest French-speaking population outside Quebec.[210] New Brunswick, the only officially bilingual province, has a French-speaking Acadian minority constituting 33 percent of the population. There are also clusters of Acadians in southwestern Nova Scotia, on Cape Breton Island, and through central and western Prince Edward Island.[211]
Other provinces have no official languages as such, but French is used as a language of instruction, in courts, and for other government services, in addition to English. Manitoba, Ontario, and Quebec allow for both English and French to be spoken in the provincial legislatures, and laws are enacted in both languages. In Ontario, French has some legal status, but is not fully co-official.[212] There are 11 Aboriginal language groups, composed of more than 65 distinct dialects.[213] Of these, only the Cree, Inuktitut and Ojibway languages have a large enough population of fluent speakers to be considered viable to survive in the long term.[214] Several aboriginal languages have official status in the Northwest Territories.[215] Inuktitut is the majority language in Nunavut, and is one of three official languages in the territory.[216]
In 2011, nearly 6.8 million Canadians listed a non-official language as their mother tongue.[217] Some of the most common non-official first languages include Chinese (mainly Cantonese; 1,072,555 first-language speakers), Punjabi (430,705), Spanish (410,670), German (409,200), and Italian (407,490).[218]
Culture

Main article: Culture of Canada


Bill Reid's 1980 sculpture Raven and The First Men. The Raven is a figure common to many of Canada's Aboriginal mythologies.
Canada's culture draws influences from its broad range of constituent nationalities, and policies that promote multiculturalism are constitutionally protected.[219] In Quebec, cultural identity is strong, and many French-speaking commentators speak of a culture of Quebec that is distinct from English Canadian culture.[220] However, as a whole, Canada is in theory a cultural mosaic – a collection of several regional, aboriginal, and ethnic subcultures.[221] Government policies such as publicly funded health care, higher taxation to redistribute wealth, the outlawing of capital punishment, strong efforts to eliminate poverty, strict gun control, and the legalization of same-sex marriage are further social indicators of Canada's political and cultural values.[222]
Historically, Canada has been influenced by British, French, and aboriginal cultures and traditions. Through their language, art and music, aboriginal peoples continue to influence the Canadian identity.[223] Many Canadians value multiculturalism and see Canada as being inherently multicultural.[66] American media and entertainment are popular, if not dominant, in English Canada; conversely, many Canadian cultural products and entertainers are successful in the United States and worldwide.[224] The preservation of a distinctly Canadian culture is supported by federal government programs, laws, and institutions such as the Canadian Broadcasting Corporation (CBC), the National Film Board of Canada (NFB), and the Canadian Radio-television and Telecommunications Commission (CRTC).[225]
Oil on canvas painting of a tree dominating its rocky landscape during a sunset.

The Jack Pine by Tom Thomson. Oil on canvas, 1916, in the collection of the National Gallery of Canada.
Canadian visual art has been dominated by figures such as Tom Thomson – the country's most famous painter – and by the Group of Seven. Thomson's career painting Canadian landscapes spanned a decade up to his death in 1917 at age 39.[226] The Group were painters with a nationalistic and idealistic focus, who first exhibited their distinctive works in May 1920. Though referred to as having seven members, five artists – Lawren Harris, A. Y. Jackson, Arthur Lismer, J. E. H. MacDonald, and Frederick Varley – were responsible for articulating the Group's ideas. They were joined briefly by Frank Johnston, and by commercial artist Franklin Carmichael. A. J. Casson became part of the Group in 1926.[227] Associated with the Group was another prominent Canadian artist, Emily Carr, known for her landscapes and portrayals of the indigenous peoples of the Pacific Northwest Coast.[228] Since the 1950s, works of Inuit art have been given as gifts to foreign dignitaries by the Canadian government.[229]
The Canadian music industry has produced internationally renowned composers, musicians and ensembles.[230] Music broadcasting in the country is regulated by the Canadian Radio-television and Telecommunications Commission (CRTC). The Canadian Academy of Recording Arts and Sciences presents Canada's music industry awards, the Juno Awards, which were first awarded in 1970.[231] Patriotic music in Canada dates back over 200 years as a distinct category from British patriotism, preceding the first legal steps to independence by over 50 years. The earliest, The Bold Canadian, was written in 1812.[232] The national anthem of Canada, O Canada, was originally commissioned by the Lieutenant Governor of Quebec, the Honourable Théodore Robitaille, for the 1880 St. Jean-Baptiste Day ceremony, and was officially adopted in 1980.[233] Calixa Lavallée wrote the music, which was a setting of a patriotic poem composed by the poet and judge Sir Adolphe-Basile Routhier. The text was originally only in French, before it was translated to English in 1906.[234]
Hockey players and fans celebrating

Canada's ice hockey victory at the 2010 Winter Olympics in Vancouver
The roots of organized sports in Canada date back to the 1770s.[235] Canada's official national sports are ice hockey and lacrosse.[236] Seven of Canada's eight largest metropolitan areas – Toronto, Montreal, Vancouver, Ottawa, Calgary, Edmonton and Winnipeg – have franchises in the National Hockey League (NHL). Other popular spectator sports in Canada include curling and Canadian football; the latter is played professionally in the Canadian Football League (CFL). Golf, tennis, baseball, skiing, cricket, volleyball, rugby union, soccer and basketball are widely played at youth and amateur levels, but professional leagues and franchises are not widespread.[237] Canada does have one professional baseball team, the Toronto Blue Jays. Canada has participated in almost every Olympic Games since its Olympic debut in 1900, and has hosted several high-profile international sporting events, including the 1976 Summer Olympics in Montreal, the 1988 Winter Olympics in Calgary, the 1994 Basketball World Championship and the 2007 FIFA U-20 World Cup. Canada was the host nation for the 2010 Winter Olympics in Vancouver and Whistler, British Columbia.[238]
Canada's national symbols are influenced by natural, historical, and Aboriginal sources. The use of the maple leaf as a Canadian symbol dates to the early 18th century. The maple leaf is depicted on Canada's current and previous flags, on the penny, and on the Arms of Canada.[239] Other prominent symbols include the beaver, Canada Goose, Common Loon, the Crown, the Royal Canadian Mounted Police,[239] and more recently, the totem pole and Inuksuk.[240]
See also

Portal icon	Canada portal
Portal icon	North America portal
Index of Canada-related articles
Outline of Canada
Topics by provinces and territories
Book icon Canada at Wikipedia books
References

Jump up ^ Department of Canadian Heritage. "Royal 'God Save The Queen'". Queen's Printer. Retrieved May 23, 2011.
Jump up ^ Kallmann, Helmut. "National and royal anthems". In Marsh, James Harley. Encyclopedia of Music in Canada. Historica-Dominion. Retrieved November 27, 2013.
^ Jump up to: a b Hail, M; Lange, S (February 25, 2010). "Federalism and Representation in the Theory of the Founding Fathers: A Comparative Study of US and Canadian Constitutional Thought". Publius: the Journal of Federalism 40 (3): 366–388. doi:10.1093/publius/pjq001.
Jump up ^ "Canada's total population estimates, 2013". Statistics Canada. Retrieved 17 November 2013.
^ Jump up to: a b c d e f "World Economic Outlook: Canada". International Monetary Fund. October 2013 data. Retrieved October 27, 2013.
Jump up ^ "Distribution of family income – Gini index". World Factbook. CIA. Retrieved September 1, 2009.
Jump up ^ "Country Comparison: Distribution Of Family Income – Gini Index". World Factbook. CIA. Retrieved May 1, 2013.
^ Jump up to: a b "2013 Human Development Index and its components – Statistics" (PDF). UNDP. 2013. Retrieved March 15, 2013.
Jump up ^ Kim Petersen (May 10, 2003). "Quest to Reify Canada as a Middle Power". Dissident Voice. Retrieved June 27, 2013.
Jump up ^ "Origin of the Name, Canada". Canadian Heritage. 2008. Retrieved May 23, 2011.
^ Jump up to: a b Maura, Juan Francisco (2009). "Nuevas aportaciones al estudio de la toponimia ibérica en la América Septentrional en el siglo XVI". Bulletin of Spanish Studies 86 (5): 577–603. doi:10.1080/14753820902969345.
Jump up ^ Rayburn, Alan (2001). Naming Canada: Stories of Canadian Place Names (2nd ed.). University of Toronto Press. pp. 1–22. ISBN 978-0-8020-8293-0.
Jump up ^ O'Toole, Roger (2009). "Dominion of the Gods: Religious continuity and change in a Canadian context". In Hvithamar, Annika; Warburg, Margit; Jacobsen, Brian Arly. Holy nations and global identities: civil religion, nationalism, and globalisation. Brill. p. 137. ISBN 978-90-04-17828-1.
^ Jump up to: a b c d Buckner, Philip, ed. (2008). Canada and the British Empire. Oxford University Press. pp. 37–40, 56–59, 114, 124–125. ISBN 978-0-19-927164-1.
Jump up ^ "Y-Chromosome Evidence for Differing Ancient Demographic Histories in the Americas" (PDF). University College London 73:524–539. 2003. doi:10.1086/377588. Retrieved May 23, 2011.
Jump up ^ Cinq-Mars, J (2001). "On the significance of modified mammoth bones from eastern Beringia" (PDF). The World of Elephants – International Congress, Rome. Retrieved May 23, 2011.
Jump up ^ Wright, JV (September 27, 2009). "A History of the Native People of Canada: Early and Middle Archaic Complexes". Canadian Museum of Civilization. Retrieved May 23, 2011.
Jump up ^ Center for Archaeological Sciences Norman Herz Professor of Geology and Director; Society of Archaelogical Sciences both at University of Georgia Ervan G. Garrison Associate Professor of Anthropology and Geology and President (1997). Geological Methods for Archaeology. Oxford University Press. p. 125. ISBN 978-0-19-802511-5.
Jump up ^ Hayes, Derek (2008). Canada: an illustrated history. Douglas & Mcintyre. pp. 7, 13. ISBN 978-1-55365-259-5.
Jump up ^ Macklem, Patrick (2001). Indigenous difference and the Constitution of Canada. University of Toronto Press. p. 170. ISBN 978-0-8020-4195-1.
Jump up ^ Sonneborn, Liz (January 2007). Chronology of American Indian History. Infobase Publishing. pp. 2–12. ISBN 978-0-8160-6770-1.
^ Jump up to: a b c Wilson, Donna M; Northcott, Herbert C (2008). Dying and Death in Canada. University of Toronto Press. pp. 25–27. ISBN 978-1-55111-873-4.
^ Jump up to: a b Thornton, Russell (2000). "Population history of Native North Americans". In Haines, Michael R; Steckel, Richard Hall. A population history of North America. Cambridge University Press. pp. 13, 380. ISBN 978-0-521-49666-7.
Jump up ^ Bailey, Garrick Alan (2008). Handbook of North American Indians: Indians in contemporary society. Government Printing Office. p. 285. ISBN 978-0-16-080388-8.
Jump up ^ "Gateway to Aboriginal Heritage: Culture". Canadian Museum of Civilization. May 12, 2000. Retrieved May 23, 2011.
Jump up ^ "ICC Charter". Inuit Circumpolar Council. 2007. Archived from the original on February 26, 2008. Retrieved May 23, 2011.
Jump up ^ "In the Kawaskimhon Aboriginal Moot Court Factum of the Federal Crown Canada". University of Manitoba Faculty of Law. 2007. p. 2. Archived from the original on November 19, 2009. Retrieved May 23, 2011.
Jump up ^ "What to Search: Topics". Ethno-Cultural and Aboriginal Groups. Library and Archives Canada. May 27, 2005. Retrieved May 23, 2011.
Jump up ^ Tanner, Adrian (1999). "3. Innu-Inuit 'Warfare'". Innu Culture. Department of Anthropology, Memorial University of Newfoundland. Retrieved May 23, 2011.
Jump up ^ Reeves, Arthur Middleton (2009). The Norse Discovery of America. BiblioLife. p. 82. ISBN 978-0-559-05400-6.
Jump up ^ "John Cabot's voyage of 1497". Memorial University of Newfoundland. 2000. Retrieved August 15, 2012.
^ Jump up to: a b Hornsby, Stephen J (2005). British Atlantic, American frontier: spaces of power in early modern British America. University Press of New England. pp. 14, 18–19, 22–23. ISBN 978-1-58465-427-8.
Jump up ^ Cartier, Jacques; Biggar, Henry Percival; Cook, Ramsay (1993). The Voyages of Jacques Cartier. University of Toronto Press. p. 26. ISBN 978-0-8020-6000-6.
Jump up ^ Rose, George A (October 1, 2007). Cod: The Ecological History of the North Atlantic Fisheries. Breakwater Books. p. 209. ISBN 978-1-55081-225-1.
Jump up ^ Ninette Kelley; Michael J. Trebilcock (September 30, 2010). The Making of the Mosaic: A History of Canadian Immigration Policy. University of Toronto Press. p. 27. ISBN 978-0-8020-9536-7.
Jump up ^ Tucker, Spencer C; Arnold, James; Wiener, Roberta (September 30, 2011). The Encyclopedia of North American Indian Wars, 1607–1890: A Political, Social, and Military History. ABC-CLIO. p. 394. ISBN 978-1-85109-697-8.
Jump up ^ Phillip Alfred Buckner; John G. Reid (1994). The Atlantic Region to Confederation: A History. University of Toronto Press. pp. 55–56. ISBN 978-0-8020-6977-1.
Jump up ^ Nolan, Cathal J (2008). Wars of the age of Louis XIV, 1650–1715: an encyclopedia of global warfare and civilization. ABC-CLIO. p. 160. ISBN 978-0-313-33046-9.
Jump up ^ Allaire, Gratien (May 2007). "From "Nouvelle-France" to "Francophonie canadienne": a historical survey". International Journal of the Sociology of Language 2007 (185): 25–52. doi:10.1515/IJSL.2007.024.
Jump up ^ Hicks, Bruce M (March 2010). "Use of Non-Traditional Evidence: A Case Study Using Heraldry to Examine Competing Theories for Canada's Confederation". British Journal of Canadian Studies 23 (1): 87–117. doi:10.3828/bjcs.2010.5.
Jump up ^ Todd Leahy; Raymond Wilson (September 30, 2009). Native American Movements. Scarecrow Press. p. 49. ISBN 978-0-8108-6892-2.
Jump up ^ McNairn, Jeffrey L (2000). The capacity to judge. University of Toronto Press. p. 24. ISBN 978-0-8020-4360-3.
Jump up ^ This is an 1885 photograph of the now-destroyed 1884 painting.
Jump up ^ "Immigration History of Canada". Marianopolis College. 2004. Archived from the original on December 16, 2007. Retrieved May 23, 2011.
Jump up ^ "The Irish Emigration of 1847 and Its Canadian Consequences". cchahistory.ca.
Jump up ^ Romney, Paul (Spring 1989). "From Constitutionalism to Legalism: Trial by Jury, Responsible Government, and the Rule of Law in the Canadian Political Culture". Law and History Review (University of Illinois Press) 7 (1): 128.
Jump up ^ Evenden, Leonard J; Turbeville, Daniel E (1992). "The Pacific Coast Borderland and Frontier". In Janelle, Donald G. Geographical snapshots of North America. Guilford Press. p. 52. ISBN 978-0-89862-030-6.
Jump up ^ "Territorial evolution". Atlas of Canada. Natural Resources Canada. Retrieved May 23, 2011.
Jump up ^ "Canada: History". Country Profiles. Commonwealth Secretariat. Retrieved May 23, 2011.
^ Jump up to: a b Bothwell, Robert (1996). History of Canada Since 1867. Michigan State University Press. pp. 31, 207–310. ISBN 978-0-87013-399-2.
Jump up ^ Bumsted, JM (1996). The Red River Rebellion. Watson & Dwyer. ISBN 978-0-920486-23-8.
^ Jump up to: a b "Building a nation". Canadian Atlas. Canadian Geographic. Retrieved May 23, 2011.
Jump up ^ "Sir John A. Macdonald". Library and Archives Canada. 2008. Retrieved May 23, 2011.
Jump up ^ Cook, Terry (2000). "The Canadian West: An Archival Odyssey through the Records of the Department of the Interior". The Archivist. Library and Archives Canada. Retrieved May 23, 2011.
^ Jump up to: a b c d e f Morton, Desmond (1999). A military history of Canada (4th ed.). McClelland & Stewart. pp. 130–158, 173, 203–233, 258. ISBN 978-0-7710-6514-9.
Jump up ^ Haglund, David G; MacFarlane, S Neil (1999). Security, strategy and the global economics of defence production. McGill-Queen's University Press. p. 12. ISBN 978-0-88911-875-1.
Jump up ^ Robert B. Bryce (June 1, 1986). Maturing in Hard Times: Canada's Department of Finance through the Great Depression. McGill-Queens. p. 41. ISBN 978-0-7735-0555-1.
Jump up ^ Mulvale, James P (July 11, 2008). "Basic Income and the Canadian Welfare State: Exploring the Realms of Possibility". Basic Income Studies 3 (1). doi:10.2202/1932-0183.1084.
^ Jump up to: a b Goddard, Lance (2005). Canada and the Liberation of the Netherlands. Dundurn Press. pp. 225–232. ISBN 978-1-55002-547-7.
Jump up ^ Bothwell, Robert (2007). Alliance and illusion: Canada and the world, 1945–1984. UBC Press. pp. 11, 31. ISBN 978-0-7748-1368-6.
Jump up ^ Summers, WF. "Newfoundland and Labrador". Canadian Encyclopedia. Historica-Dominion. Retrieved November 27, 2013.
Jump up ^ Mackey, Eva (2002). The house of difference: cultural politics and national identity in Canada. University of Toronto Press. p. 57. ISBN 978-0-8020-8481-1.
Jump up ^ Landry, Rodrigue; Forgues, Éric (May 2007). "Official language minorities in Canada: an introduction". International Journal of the Sociology of Language 2007 (185): 1–9. doi:10.1515/IJSL.2007.022.
Jump up ^ Esses, Victoria M; Gardner, RC (July 1996). "Multiculturalism in Canada: Context and current status". Canadian Journal of Behavioural Science 28 (3): 145–152. doi:10.1037/h0084934.
Jump up ^ Sarrouh, Elissar (January 22, 2002). "Social Policies in Canada: A Model for Development". Social Policy Series, No. 1. United Nations. pp. 14–16, 22–37. Archived from the original on February 1, 2010. Retrieved May 23, 2011.
^ Jump up to: a b Bickerton, James; Gagnon, Alain, ed. (2004). Canadian Politics (4th ed.). Broadview Press. pp. 250–254, 344–347. ISBN 978-1-55111-595-5.
Jump up ^ Légaré, André (2008). "Canada's Experiment with Aboriginal Self-Determination in Nunavut: From Vision to Illusion". International Journal on Minority and Group Rights 15 (2–3): 335–367. doi:10.1163/157181108X332659.
Jump up ^ Munroe, HD (2009). "The October Crisis Revisited: Counterterrorism as Strategic Choice, Political Result, and Organizational Practice". Terrorism and Political Violence 21 (2): 288–305. doi:10.1080/09546550902765623.
^ Jump up to: a b Sorens, J (December 2004). "Globalization, secessionism, and autonomy". Electoral Studies 23 (4): 727–752. doi:10.1016/j.electstud.2003.10.003.
Jump up ^ Leblanc, Daniel (August 13, 2010). "A brief history of the Bloc Québécois". The Globe and Mail. Retrieved November 25, 2010.
Jump up ^ Betz, Hans-Georg; Immerfall, Stefan (1998). The new politics of the Right: neo-Populist parties and movements in established democracies. St. Martinʼs Press. p. 173. ISBN 978-0-312-21134-9.
Jump up ^ "Commission of Inquiry into the Investigation of the Bombing of Air India Flight 182". Government of Canada. Archived from the original on June 22, 2008. Retrieved May 23, 2011.
Jump up ^ Sourour, Teresa K (1991). "Report of Coroner's Investigation" (PDF). Retrieved May 23, 2011.
Jump up ^ "The Oka Crisis" (Digital Archives). CBC. 2000. Retrieved May 23, 2011.
Jump up ^ Roach, Kent (2003). September 11: consequences for Canada. McGill-Queen's University Press. pp. 15, 59–61, 194. ISBN 978-0-7735-2584-9.
Jump up ^ "Canada and Multilateral Operations in Support of Peace and Stability". National Defence and the Canadian Forces. 2010. Retrieved May 23, 2011.
Jump up ^ "UNPROFOR". Royal Canadian Dragoons. Retrieved October 24, 2012.
Jump up ^ Jockel, Joseph T; Sokolsky, Joel B (2008). "Canada and the war in Afghanistan: NATO's odd man out steps forward". Journal of Transatlantic Studies 6 (1): 100–115. doi:10.1080/14794010801917212.
Jump up ^ "Canada Recession: Global Recovery Still Fragile 3 Years On". Huffington Post. July 22, 2012. Retrieved September 1, 2012.
Jump up ^ "Canada's military contribution in Libya". CBC. October 20, 2011. Retrieved November 27, 2011.
Jump up ^ "Canada: Geography". Country Profiles. Commonwealth Secretariat. Retrieved May 23, 2011.
^ Jump up to: a b c d "Canada". World Factbook. CIA. May 16, 2006. Retrieved May 23, 2011.
Jump up ^ "Territorial Evolution, 1927". National Resources Canada. April 6, 2004. Retrieved May 23, 2011.
Jump up ^ Susic, Stela (August 15, 2006). "Air Force becomes command authority for CFS Alert". The Maple Leaf (National Defence Canada) 12 (17). Retrieved May 23, 2011.
Jump up ^ "The Boundary". International Boundary Commission. 1985. Retrieved May 17, 2012.
Jump up ^ National Atlas of Canada. Natural Resources Canada. 2005. p. 1. ISBN 978-0-7705-1198-2.
Jump up ^ I.e., lakes over 3 square kilometres (300 ha) in area. "Lakes". Atlas of Canada. Retrieved April 13, 2012.
Jump up ^ Bailey, William G; Oke, TR; Rouse, Wayne R (1997). The surface climates of Canada. McGill-Queen's University Press. p. 124. ISBN 978-0-7735-1672-4.
Jump up ^ Etkin, David; Haque, CE; Brooks, Gregory R (April 30, 2003). An Assessment of Natural Hazards and Disasters in Canada. Springer. pp. 569, 582, 583. ISBN 978-1-4020-1179-5.
Jump up ^ "Tseax Cone". Catalogue of Canadian volcanoes. Geological Survey of Canada. August 19, 2005. Retrieved May 23, 2011.
Jump up ^ "Population Density, 2001". Atlas of Canada. Natural Resources Canada. June 15, 2005. Retrieved May 23, 2011.
Jump up ^ The Weather Network. "Statistics, Regina SK". Archived from the original on January 5, 2009. Retrieved January 18, 2010.
Jump up ^ "Canadian Climate Normals or Averages 1971–2000". Environment Canada. March 25, 2004. Retrieved May 23, 2011.
Jump up ^ Queen Victoria (March 29, 1867). Constitution Act, 1867: Preamble. Queen's Printer. Retrieved May 23, 2011.
Jump up ^ Smith, David E (June 10, 2010). "The Crown and the Constitution: Sustaining Democracy?". The Crown in Canada: Present Realities and Future Options (Queen's University). p. 6. Archived from the original on June 17, 2010. Retrieved May 23, 2011.
^ Jump up to: a b MacLeod, Kevin S (2012). A Crown of Maples (2nd ed.). Queen's Printer for Canada. p. 16. ISBN 978-0-662-46012-1. Retrieved May 23, 2011.
Jump up ^ Canadian Heritage (February 2009). Canadian Heritage Portfolio (2nd ed.). Queen's Printer. pp. 3–4. ISBN 978-1-100-11529-0. Retrieved May 23, 2011.
Jump up ^ "The Governor General of Canada: Roles and Responsibilities". Queen's Printer. Retrieved May 23, 2011.
Jump up ^ Commonwealth public administration reform 2004. Commonwealth Secretariat. 2004. pp. 54–55. ISBN 978-0-11-703249-1.
^ Jump up to: a b c Forsey, Eugene (2005). How Canadians Govern Themselves (6th ed.). Queen's Printer. pp. 1, 16, 26. ISBN 978-0-662-39689-5. Archived from the original on January 15, 2011. Retrieved May 23, 2011.
^ Jump up to: a b Marleau, Robert; Montpetit, Camille. "House of Commons Procedure and Practice: Parliamentary Institutions". Queen's Printer. Retrieved May 23, 2011.
Jump up ^ "Prime Minister of Canada". Queen's Printer. 2009. Retrieved May 23, 2011.
Jump up ^ Johnson, David (2006). Thinking government: public sector management in Canada (2nd ed.). University of Toronto Press. pp. 134–135, 149. ISBN 978-1-55111-779-9.
Jump up ^ "The Opposition in a Parliamentary System". Library of Parliament. Retrieved May 23, 2011.
Jump up ^ O'Neal, Brian; Bédard, Michel; Spano, Sebastian (April 11, 2011). "Government and Canada's 41st Parliament: Questions and Answers". Library of Parliament. Retrieved June 2, 2011.
Jump up ^ Hicks, Bruce M; Blais, André (2008). "Restructuring the Canadian Senate through Elections". IIRP Choices (Institute for Research on Public Policy) 14 (14): 11.
Jump up ^ "Difference between Canadian Provinces and Territories". Intergovernmental Affairs Canada. 2009. Retrieved May 23, 2011.
Jump up ^ "A Comparison of Provincial & Territorial Governments". Legislative Assembly of the Northwest Territories. 2008. Retrieved May 23, 2011.
Jump up ^ Bakan, Joel; Elliot, Robin M (2003). Canadian Constitutional Law. Emond Montgomery Publications. pp. 3–8, 683–687, 699. ISBN 978-1-55239-085-6.
Jump up ^ David L. Preston (2009). The Texture of Contact: European and Indian Settler Communities on the Frontiers of Iroquoia, 1667-1783. U of Nebraska Press. pp. 43–44. ISBN 978-0-8032-2549-7.
^ Jump up to: a b c Assembly of First Nations, Elizabeth II (2004). "A First Nations – Federal Crown Political Accord". 1. Assembly of First Nations. p. 3. Archived from the original on December 29, 2009. Retrieved May 23, 2011.
Jump up ^ "Treaty areas". Treasury Board of Canada Secretariat. October 7, 2002. Retrieved May 23, 2011.
Jump up ^ "What is Treaty 8?". CBC. Retrieved May 23, 2011.
Jump up ^ McCormick, Peter (2000). Supreme at last: the evolution of the Supreme Court of Canada. James Lorimer & Company Ltd. pp. 2, 86, 154. ISBN 978-1-55028-692-2.
Jump up ^ "About the Court". Supreme Court of Canada. 2009. Retrieved May 23, 2011.
Jump up ^ Sworden, Philip James (2006). An introduction to Canadian law. Emond Montgomery Publications. pp. 22, 150. ISBN 978-1-55239-145-7.
Jump up ^ "Ontario Provincial Police". OPP official website. 2009. Retrieved October 24, 2012.
Jump up ^ Royal Canadian Mounted Police. "Keeping Canada and Our Communities Safe and Secure". Queen's Printer. Retrieved May 23, 2011.
Jump up ^ "About the Canadian Forces". Department of National Defence. Retrieved February 18, 2013.
Jump up ^ "Military expenditure of Canada". SIPRI. Retrieved May 3, 2012.
Jump up ^ Haglung, David G (Autumn 2003). "North American Cooperation in an Era of Homeland Security". Orbis (Foreign Policy Research Institute) 47 (4): 675–691. doi:10.1016/S0030-4387(03)00072-3.
Jump up ^ James, Patrick (2006). Michaud, Nelson; O'Reilly, Marc J, ed. Handbook of Canadian Foreign Policy. Lexington Books. pp. 213–214, 349–362. ISBN 978-0-7391-1493-3.
Jump up ^ Teigrob, Robert (September 2010). "'Which Kind of Imperialism?' Early Cold War Decolonization and Canada–US Relations". Canadian Review of American Studies 37 (3): 403–430. doi:10.3138/cras.37.3.403.
Jump up ^ Canada's international policy statement: a role of pride and influence in the world. Government of Canada. 2005. ISBN 978-0-662-68608-8.
Jump up ^ Finkel, Alvin (1997). Our lives: Canada after 1945. Lorimer. pp. 105–107, 111–116. ISBN 978-1-55028-551-2.
Jump up ^ Holloway, Steven Kendall (2006). Canadian foreign policy: defining the national interest. University of Toronto Press. pp. 102–103. ISBN 978-1-55111-816-1.
Jump up ^ Farnsworth, Clyde H (November 27, 1994). "Torture by Army Peacekeepers in Somalia Shocks Canada". The New York Times. Retrieved May 23, 2011.
Jump up ^ "Canada and the Organization of American States (OAS)". Canadian Heritage. 2008. Retrieved May 23, 2011.
Jump up ^ "Opening Doors to Asia". Foreign Affairs and International Trade Canada. 2009. Retrieved May 23, 2011.
Jump up ^ "In the line of duty: Canada's casualties". CBC. October 31, 2011. Retrieved January 23, 2012.
Jump up ^ "Cost of the Afghanistan mission 2001–2011". Government of Canada. Retrieved July 11, 2011.
Jump up ^ Vagnoni, Giselda (February 5, 2007). "Rich nations to sign $1.5 bln vaccine pact in Italy". Reuters. Retrieved May 23, 2011.
Jump up ^ Blomfield, Adrian (August 3, 2007). "Russia claims North Pole with Arctic flag stunt". The Daily Telegraph. Retrieved May 23, 2011.
Jump up ^ "Canada's Libya mission to end in 2 weeks". CBC. October 20, 2011. Retrieved December 30, 2011.
Jump up ^ Bird, Richard M (October 22, 2008). "Government Finance". Historical Statistics of Canada. Statistics Canada. Retrieved May 23, 2011.
Jump up ^ "Latest release". World Trade Organization. April 17, 2008. Retrieved May 23, 2011.
Jump up ^ "Index of Globalization 2010". KOF. Retrieved May 22, 2012.
Jump up ^ "Index of Economic Freedom". Heritage Foundation/Wall Street Journal. 2013. Retrieved June 27, 2013.
Jump up ^ "Jonathan Kay: The key to Canada's economic advantage over the United States? Less income inequality". National Post. December 13, 2012. Retrieved December 14, 2012.
Jump up ^ "Imports, exports and trade balance of goods on a balance-of-payments basis, by country or country grouping". Statistics Canada. November 16, 2009. Retrieved May 23, 2011.
Jump up ^ Grant, Tavia (February 10, 2010). "Canada has first yearly trade deficit since 1975". The Globe and Mail. Retrieved May 23, 2011.
Jump up ^ "Employment by Industry". Statistics Canada. January 8, 2009. Retrieved May 23, 2011.
Jump up ^ Easterbrook, WT (March 1995). "Recent Contributions to Economic History: Canada". Journal of Economic History 19: 98.
^ Jump up to: a b Brown, Charles E (2002). World energy resources. Springer. pp. 323, 378–389. ISBN 978-3-540-42634-9.
Jump up ^ "World proven crude oil reserves by country, 1960–2011". Organization of the Petroleum Exporting Countries. 2012. "Oil & Gas Journal's oil reserve estimate for Canada includes 5.392 billion barrels (857,300,000 m3) of conventional crude oil and condensate reserves and 173.2 billion barrels (2.754×1010 m3) of oil sands reserves. Information collated by EIA"
^ Jump up to: a b Britton, John NH (1996). Canada and the Global Economy: The Geography of Structural and Technological Change. McGill-Queen's University Press. pp. 26–27, 155–163. ISBN 978-0-7735-1356-3.
Jump up ^ "Zinc Production by Country (Metric tons, zinc content of concentrate and direct shipping ore, unless otherwise specified)". United States Geological Survey data via Index Mundi. 2009. Retrieved May 14, 2012.
Jump up ^ http://www.nrcan.gc.ca/minerals-metals/publications-reports/3264
Jump up ^ Leacy, FH, ed. (1983). "Vl-12". Statistics Canada. Retrieved May 23, 2011.
Jump up ^ Morck, Randall; Tian, Gloria; Yeung, Bernard (2005). "Who owns whom? Economic nationalism and family controlled pyramidal groups in Canada". In Eden, Lorraine; Dobson, Wendy. Governance, multinationals, and growth. Edward Elgar Publishing. p. 50. ISBN 978-1-84376-909-5.
Jump up ^ Hale, Geoffrey (October 2008). "The Dog That Hasn't Barked: The Political Economy of Contemporary Debates on Canadian Foreign Investment Policies". Canadian Journal of Political Science 41 (3): 719–747. doi:10.1017/S0008423908080785.
Jump up ^ "Jean Chrétien". CBC. July 13, 2009. Retrieved May 23, 2011.
Jump up ^ Sturgeon, Jamie (March 13, 2009). "Jobless rate to peak at 10%: TD". National Post. Archived from the original on February 1, 2010. Retrieved May 23, 2011.
Jump up ^ "Latest release from Labour Force Survey". Statistics Canada. November 6, 2009. Retrieved May 23, 2011.
Jump up ^ Yalnizyan, Armine (October 15, 2010). "The real state of Canada's jobs market". The Globe and Mail. Retrieved December 12, 2010.
Jump up ^ "Budget fights deficit with freeze on future spending". CTV News. March 4, 2010. Retrieved May 23, 2011.
Jump up ^ "Canada's international investment position". The Daily. Statistics Canada. June 17, 2010. Retrieved May 23, 2011.
Jump up ^ "Canada’s Budget Triumph" (PDF). Mercatus Center (George Mason University). September 30, 2010. Retrieved July 15, 2013.
Jump up ^ "Canadian consumer confidence stronger despite eurozone woes". Calgary Herald. July 24, 2012. Retrieved August 19, 2012.
Jump up ^ "Economic growth slows in India, Brazil and Canada". BBC. November 30, 2012. Retrieved November 30, 2012.
Jump up ^ "Canada's Economic Luster Fizzling". Wall Street Journal. February 11, 2013. Retrieved February 12, 2013.
Jump up ^ "Canada's economy barely expanded in April". CBC News. June 28, 2013. Retrieved June 29, 2013.
Jump up ^ "Canada's Trade with the World, by Region". Asia Pacific Foundation of Canada. March 22, 2012. Retrieved January 9, 2013.
Jump up ^ "Phoenix-Encana JV—China invests in Canadian fuel". MorningWhistle.com. December 14, 2012. Retrieved December 14, 2012.
Jump up ^ "Northern Gateway pipeline would strengthen trade ties to China". The Globe and Mail. May 7, 2012. Retrieved August 19, 2012.
Jump up ^ "Pipeline economics: China needs oil, and Canada's got it". Macleans.ca. September 25, 2012. Retrieved December 4, 2012.
Jump up ^ "Spending on research and development". Statistics Canada. January 13, 2012. Retrieved April 29, 2012.
Jump up ^ "Canadian Nobel Prize in Science Laureates". Queen's University. Retrieved June 2, 2011.
Jump up ^ "Canada ranked fourth in the world for scientific research". The Globe and Mail. September 26, 2012. Retrieved October 17, 2012.
Jump up ^ "Top 250 Canadian Technology Companies". Branham Group Inc. Retrieved January 13, 2012.
Jump up ^ "Internet Usage and Population in North America". Internetworldstats. June 2012 data. Retrieved December 20, 2012.
Jump up ^ "Alouette I and II". CSA. Retrieved November 30, 2012.
Jump up ^ "Canada's astronauts". CBC News. October 26, 2010. Retrieved December 8, 2011.
Jump up ^ "The Canadian Aerospace Industry praises the federal government for recognizing Space as a strategic capability for Canada". Newswire. Retrieved May 23, 2011.
Jump up ^ "Black Brant Sounding Rockets". Magellan Aerospace. Retrieved May 23, 2011.
Jump up ^ "2011 Census: Population and dwelling counts". Statistics Canada. February 8, 2012. Retrieved February 8, 2012.
Jump up ^ Beauchesne, Eric (March 13, 2007). "We are 31,612,897". National Post. Retrieved May 23, 2011.
Jump up ^ Green, Jeff (December 6, 2012). "Canada’s population hits 35 million". The Toronto Star. Retrieved September 16, 2013.
Jump up ^ Custred, Glynn (2008). "Security Threats on America's Borders". In Moens, Alexander. Immigration policy and the terrorist threat in Canada and the United States. Fraser Institute. p. 96. ISBN 978-0-88975-235-1.
Jump up ^ "Urban-rural population as a proportion of total population, Canada, provinces, territories and health regions". Statistics Canada. 2001. Retrieved May 23, 2011.
Jump up ^ Martel, Laurent; Malenfant, Éric Caron (September 22, 2009). "2006 Census: Portrait of the Canadian Population in 2006, by Age and Sex". Statistics Canada. Retrieved October 18, 2009.
Jump up ^ "Canadian population creeps up in average age". CBC. September 28, 2011. Retrieved April 11, 2012.
Jump up ^ "Ethnocultural Portrait of Canada – Data table". Statistics Canada. July 28, 2009. Retrieved May 23, 2011.
Jump up ^ "Aboriginal Identity (8), Sex (3) and Age Groups (12) for the Population of Canada, Provinces, Territories, Census Metropolitan Areas and Census Agglomerations, 2006 Census – 20% Sample Data". 2006 Census: Topic-based tabulations. Statistics Canada. June 12, 2008. Retrieved September 18, 2009.
Jump up ^ "One in 6 Canadians is a visible minority". CBC. April 2, 2008. Retrieved October 20, 2009.
Jump up ^ "2006 Census: Ethnic origin, visible minorities, place of work and mode of transportation". The Daily. Statistics Canada. April 2, 2008. Retrieved January 19, 2010.
Jump up ^ Pendakur, Krishna. "Visible Minorities and Aboriginal Peoples in Vancouver's Labour Market". Simon Fraser University. Retrieved January 19, 2010.
Jump up ^ "2006 Census: Immigration, citizenship, language, mobility and migration". The Daily. Statistics Canada. December 4, 2007. Retrieved October 19, 2009.
Jump up ^ Lilley, Brian (2010). "Canadians want immigration shakeup". Parliamentary Bureau. Canadian Online Explorer. Retrieved November 14, 2010.
Jump up ^ Friesen, Joe (March 9, 2010). "The changing face of Canada: booming minority populations by 2031". The Globe and Mail. Retrieved May 14, 2012.
Jump up ^ Zimmerman, Karla (2008). Canada (10th ed.). Lonely Planet Publications. p. 51. ISBN 978-1-74104-571-0.
Jump up ^ "Canada welcomes highest number of legal immigrants in 50 years while taking action to maintain the integrity of Canada's immigration system". Citizenship and Immigration Canada. February 13, 2011. Retrieved February 11, 2012.
Jump up ^ "Supplementary Information for the 2013 Immigration Levels Plan". Citizenship and Immigration Canada. Retrieved October 20, 2013.
Jump up ^ "Canada's 2011 immigration level unchanged". CBC. November 2, 2010. Retrieved December 12, 2010.
Jump up ^ "When immigration goes awry". Toronto Star. July 14, 2006. Retrieved January 8, 2010.
Jump up ^ "Government of Canada Tables 2011 Immigration Plan". Canada News Centre. Retrieved December 12, 2010.
Jump up ^ "Canada's Generous Program for Refugee Resettlement Is Undermined by Human Smugglers Who Abuse Canada's Immigration System". Public Safety Canada. Retrieved December 12, 2010.
Jump up ^ "'No Religion' Is Increasingly Popular For Canadians: Report". Huffington Post. May 15, 2013. Retrieved May 19, 2013.
Jump up ^ "Religions in Canada—Census 2011". Statistics Canada/Statistique Canada. 2011. Retrieved May 19, 2013.
Jump up ^ "Overview of Education in Canada". Council of Ministers of Education, Canada. Archived from the original on January 5, 2010. Retrieved October 20, 2010.
Jump up ^ Canada – OECD Better Life Index. Oecdbetterlifeindex.org. Retrieved on January 1, 2013.
Jump up ^ "Creating Opportunities for All Canadians". Department of Finance Canada. November 14, 2005. Retrieved May 22, 2006.
Jump up ^ "The most educated countries in the world". NBC. 2012. Retrieved April 25, 2013.
Jump up ^ "Comparing countries' and economies' performances". OECD. 2009. Retrieved May 22, 2012.
Jump up ^ "Canadian education among best in the world: OECD". CTV News. December 7, 2010. Retrieved February 15, 2013.
^ Jump up to: a b "2006 Census: The Evolving Linguistic Portrait, 2006 Census: Highlights". Statistics Canada. 2006 (2010). Retrieved October 12, 2010.
Jump up ^ "Official Languages and You". Office of the Commissioner of Official Languages. June 16, 2009. Retrieved September 10, 2009.
Jump up ^ "Population by knowledge of official language, by province and territory". Statistics Canada. 2006. Retrieved May 26, 2012.
Jump up ^ Bourhis, Richard Y; Montaruli, Elisa; Amiot, Catherine E (May 2007). "Language planning and French-English bilingual communication: Montreal field studies from 1977 to 1997". International Journal of the Sociology of Language 2007 (185): 187–224. doi:10.1515/IJSL.2007.031.
Jump up ^ Lachapelle, R (March 2009). "The Diversity of the Canadian Francophonie". Statistics Canada. Retrieved September 24, 2009.
Jump up ^ Hayday, Matthew (2005). Bilingual Today, United Tomorrow: Official Languages in Education and Canadian Federalism. McGill-Queen's University Press. p. 49. ISBN 978-0-7735-2960-1.
Jump up ^ Heller, Monica (2003). Crosswords: language, education and ethnicity in French Ontario. Mouton de Gruyter. pp. 72, 74. ISBN 978-3-11-017687-2.
Jump up ^ "Aboriginal languages". Statistics Canada. Retrieved October 5, 2009.
Jump up ^ Gordon, Raymond G Jr (2005). Ethnologue: Languages of the world (Web Version online by SIL International) (15th ed.). SIL International. ISBN 978-1-55671-159-6. Retrieved October 6, 2009.
Jump up ^ Fettes, Mark; Norton, Ruth (2001). "Voices of Winter: Aboriginal Languages and Public Policy in Canada". In Castellano, Marlene Brant; Davis, Lynne; Lahache, Louise. Aboriginal education: fulfilling the promise. UBC Press. p. 39. ISBN 978-0-7748-0783-8.
Jump up ^ Russell, Peter H (2005). "Indigenous Self-Determination: Is Canada as Good as it Gets?". In Hocking, Barbara. Unfinished constitutional business?: rethinking indigenous self-determination. Aboriginal Studies Press. p. 180. ISBN 978-0-85575-466-2.
Jump up ^ "What Languages Do Canadians Speak? Language Statistics From the 2011 Census of Canada". About.com: Canada Online. October 31, 2012. Retrieved November 26, 2012.
Jump up ^ "Population by mother tongue, by province and territory". Statistics Canada. January 2013. Retrieved July 4, 2013.
Jump up ^ Rand Dyck (2011). Canadian Politics. Cengage Learning. p. 88. ISBN 978-0-17-650343-7.
Jump up ^ Franklin, Daniel P; Baun, Michael J (1995). Political culture and constitutionalism: a comparative approach. Sharpe. p. 61. ISBN 978-1-56324-416-2.
Jump up ^ Garcea, Joseph; Kirova, Anna; Wong, Lloyd (January 2009). "Multiculturalism Discourses in Canada". Canadian Ethnic Studies 40 (1): 1–10. doi:10.1353/ces.0.0069.
Jump up ^ Bricker, Darrell; Wright, John (2005). What Canadians think about almost everything. Doubleday Canada. pp. 8–28. ISBN 978-0-385-65985-7.
Jump up ^ Magocsi, Paul R (2002). Aboriginal peoples of Canada: a short introduction. University of Toronto Press. pp. 3–6. ISBN 978-0-8020-3630-8.
Jump up ^ Blackwell, John D (2005). "Culture High and Low". International Council for Canadian Studies World Wide Web Service. Retrieved March 15, 2006.
Jump up ^ "Mandate of the National Film Board". National Film Board of Canada. 2005. Retrieved October 20, 2009.
Jump up ^ Brock, Richard (2008). "Envoicing Silent Objects: Art and Literature at the Site of the Canadian Landscape". Canadian Journal of Environmental Education 13 (2): 50–61.
Jump up ^ Hill, Charles C (1995). The Group of Seven – Art for a Nation. National Gallery of Canada. pp. 15–21, 195. ISBN 978-0-7710-6716-7.
Jump up ^ Newlands, Anne (1996). Emily Carr. Firefly Books. pp. 8–9. ISBN 978-1-55209-046-6.
Jump up ^ Pamela R. Stern (June 30, 2010). Daily life of the Inuit. ABC-CLIO. p. 151. ISBN 978-0-313-36311-5.
Jump up ^ Dorland, Michael (1996). The cultural industries in Canada: problems, policies and prospects. J. Lorimer. p. 95. ISBN 978-1-55028-494-2.
Jump up ^ Edwardson, Ryan (2008). Canadian content, culture and the quest for nationhood. University of Toronto Press. p. 127. ISBN 978-0-8020-9759-0.
Jump up ^ Adam Jortner (2011). The Gods of Prophetstown: The Battle of Tippecanoe and the Holy War for the American Frontier. Oxford University Press. p. 217. ISBN 978-0-19-976529-4.
Jump up ^ "'O Canada'". Historica-Dominion. Retrieved November 27, 2013.
Jump up ^ "Hymne national du Canada". Canadian Heritage. June 23, 2008. Retrieved June 26, 2008.
Jump up ^ Henry Roxborough, "The Beginning of Organized Sport in Canada," Canada (1975) 2#3 pp 30–43
Jump up ^ "National Sports of Canada Act". Canadian Heritage. November 17, 2008. Retrieved October 1, 2012.
Jump up ^ Conference Board of Canada (December 2004). "Survey: Most Popular Sports, by Type of Participation, Adult Population". Strengthening Canada: The Socio-economic Benefits of Sport Participation in Canada – Report August 2005. Sport Canada. Retrieved July 1, 2006.
Jump up ^ "Vancouver 2010". The Vancouver Organizing Committee for the 2010 Olympic and Paralympic Winter Games. 2009. Retrieved October 20, 2009.
^ Jump up to: a b Canadian Heritage (2002). Symbols of Canada. Canadian Government Publishing. ISBN 978-0-660-18615-3.
Jump up ^ Ruhl, Jeffrey (January 2008). "Inukshuk Rising". Canadian Journal of Globalization 1 (1): 25–30.
Further reading

Main article: Bibliography of Canada
History
Francis, RD; Jones, Richard; Smith, Donald B (2009). Journeys: A History of Canada. Nelson Education. ISBN 978-0-17-644244-6.
Taylor, Martin Brook; Owram, Doug (1994). Canadian History. 1 & 2. University of Toronto Press. ISBN 978-0-8020-5016-8, ISBN 978-0-8020-2801-3
Geography and climate
Stanford, Quentin H, ed. (2008). Canadian Oxford World Atlas (6th ed.). Oxford University Press (Canada). ISBN 978-0-19-542928-2.
Government and law
Malcolmson, Patrick; Myers, Richard (2009). The Canadian Regime: An Introduction to Parliamentary Government in Canada (4th ed.). University of Toronto Press. ISBN 978-1-4426-0047-8.
Morton, Frederick Lee (2002). Law, politics, and the judicial process in Canada. Frederick Lee. ISBN 978-1-55238-046-8.
Military
Granatstein, JL (2011). Canada's Army: Waging War and Keeping the Peace (2nd ed.). University of Toronto Press. ISBN 978-1-4426-1178-8.
Economy
2012 Economic Survey (PDF). OECD Economic Surveys. 2013. (List of Economic Surveys)
Council of Canadian Academies (2012). The State of Science and Technology in Canada, 2012. Council of Canadian Academies. ISBN 978-1-926558-47-9.
Demography and statistics
Statistics Canada (2008). Canada Year Book (CYB) annual 1867–1967. Federal Publications (Queen of Canada).
Statistics Canada (December 2012). Canada Year Book. Federal Publications (Queen of Canada). ISSN 0068-8142. Catalogue no 11-402-XWE (.
Culture
Andrew Cohen (2007). The Unfinished Canadian: The People We Are. McClelland & Stewart. ISBN 978-0-7710-2181-7.
Magocsi, Paul R (1999). Encyclopedia of Canada's peoples. Society of Ontario, University of Toronto Press. ISBN 978-0-8020-2938-6.
External links

Find more about Canada at Wikipedia's sister projects
	Definitions and translations from Wiktionary
	Media from Commons
	Learning resources from Wikiversity
	Quotations from Wikiquote
	Source texts from Wikisource
	Textbooks from Wikibooks
	Travel guide from Wikivoyage
Listen to this article (info/dl)
MENU0:00

This audio file was created from a revision of the "Canada" article dated 2008-01-04, and does not reflect subsequent edits to the article. (Audio help)
More spoken articles
Sound-icon.svg
Overviews
Canada from UCB Libraries GovPubs
Canada at the Open Directory Project
Canada from BBC News
Canada from CIA World Factbook
Canada profile from the OECD
Canadiana: The National Bibliography of Canada
Key Development Forecasts for Canada from International Futures
Government
Official website of the Government of Canada
Official website of the Governor General of Canada
Travel
Canada's Official Tourism Website
Studies
A Guide to the Sources from International Council for Canadian Studies
[show] 
Maple Leaf (from roundel).svg Topics related to Canada
This is a featured article. Click here for more information.
Categories: Canada1867 establishments in CanadaConstitutional monarchiesEnglish-speaking countries and territoriesFederal countriesFormer British coloniesFrench-speaking countries and territoriesG8 nationsG20 nationsLiberal democraciesMember states of the Commonwealth of NationsMember states of La FrancophonieMember states of NATOMember states of the United NationsNorthern American countries
DEAR WIKIPEDIA READERS: We are the small non-profit that runs the #5 website in the world. We have only 175 staff but serve 500 million users, and have costs like any other top site: servers, power, programs, and staff. To protect our independence, we'll never run ads. We take no government funds. We survive on donations averaging about $15. Now is the time we ask. If everyone reading this gave $3, our fundraiser would be done within an hour. Wikipedia is something special. It is like a library or a public park. It is like a temple for the mind, a place we can all go to think and learn. If Wikipedia is useful to you, take one minute to keep it online and ad-free another year. Please help us forget fundraising and get back to Wikipedia. Thank you.
One-time	Monthly*
$3	$5	$10	$20
$30	$50	$100	$  
Credit Card  PayPal
 
Problems donating? | Other ways to give | Frequently asked questions | By donating, you are agreeing to our donor privacy policy and to sharing your information with the Wikimedia Foundation and its service providers in the U.S. and elsewhere. *Monthly payments will be debited by the Wikimedia Foundation until you notify us to stop. We'll send you an email receipt for each payment, which will include a link to easy cancellation instructions.
Software engineering
From Wikipedia, the free encyclopedia


A software engineer programming for the Wikimedia Foundation
Software engineering (SE) is the application of a systematic, disciplined, quantifiable approach to the design, development, operation, and maintenance of software, and the study of these approaches; that is, the application of engineering to software.[1][2][3] In layman's terms, it is the act of using insights to conceive, model and scale a solution to a problem. The first reference to the term is the 1968 NATO Software Engineering Conference and was meant to provoke thought regarding the perceived "software crisis" at the time.[4][5][6] Software development, a much used and more generic term, does not necessarily subsume the engineering paradigm. The generally accepted concepts of Software Engineering as an engineering discipline have been specified in the Guide to the Software Engineering Body of Knowledge (SWEBOK). The SWEBOK has become an internationally accepted standard ISO/IEC TR 19759:2005.[7]
For those who wish to become recognized as professional software engineers, the IEEE offers two certifications (Certified Software Development Associate and Certified Software Development Professional). The IEEE certifications do not use the term Engineer in their title for compatibility reasons. In some parts of the US such as Texas, the use of the term Engineer is regulated only to those who have a Professional Engineer license. Further, in the United States starting from 2013, the NCEES Professional Engineer exam will be available for Software Engineering.[8]
Contents  [hide] 
1 History
2 Profession
2.1 Employment
2.2 Certification
2.3 Impact of globalization
3 Education
4 Comparison with other disciplines
5 Software development process
5.1 Models
5.1.1 Waterfall model
5.1.2 Agile model
6 Subdisciplines
7 Related disciplines
7.1 Systems engineering
8 See also
9 Notes
10 References
11 Further reading
12 External links
History[edit]

Main article: History of software engineering
When the first digital computers appeared in the early 1940s,[9] the instructions to make them operate were wired into the machine. Practitioners quickly realized that this design was not flexible and came up with the "stored program architecture" or von Neumann architecture. Thus the division between "hardware" and "software" began with abstraction being used to deal with the complexity of computing.
Programming languages started to appear in the 1950s and this was also another major step in abstraction. Major languages such as Fortran, ALGOL, and COBOL were released in the late 1950s to deal with scientific, algorithmic, and business problems respectively. E.W. Dijkstra wrote his seminal paper, "Go To Statement Considered Harmful",[10] in 1968 and David Parnas introduced the key concept of modularity and information hiding in 1972[11] to help programmers deal with the ever increasing complexity of software systems. A software system for managing the hardware called an operating system was also introduced, most notably by Unix in 1969. In 1967, the Simula language introduced the object-oriented programming paradigm.
These advances in software were met with more advances in computer hardware. In the mid-1970s, the microcomputer was introduced, making it economical for hobbyists to obtain a computer and write software for it. This in turn led to the now famous Personal Computer (PC). The Software Development Life Cycle or SDLC was also starting to appear as a consensus for centralized construction of software in the mid-1980s. The late 1970s and early 1980s saw the introduction of several new Simula-inspired object-oriented programming languages, including Smalltalk, Objective-C, and C++.
Open-source software started to appear in the early 90s in the form of Linux and other software introducing the "bazaar" or decentralized style of constructing software.[12] Then the World Wide Web and the popularization of the Internet hit in the mid 90s, changing the engineering of software once again. Distributed systems gained sway as a way to design systems, and the Java programming language was introduced with its own virtual machine as another step in abstraction. Programmers collaborated and wrote the Agile Manifesto, which favored more lightweight processes to create cheaper and timelier software.
The current definition of software engineering is still being debated by practitioners today as they struggle to come up with ways to produce software that is "cheaper, better, faster"[citation needed]. Cost reduction has been a primary focus of the IT industry since the 1990s. Total cost of ownership represents the costs of more than just acquisition. It includes things like productivity impediments, upkeep efforts, and resources needed to support infrastructure.
Profession[edit]

Main article: Software engineer
Legal requirements for the licensing or certification of professional software engineers vary around the world. In the UK, the British Computer Society licenses software engineers and members of the society can also become Chartered Engineers (CEng), while in some areas of Canada, such as Alberta, Ontario,[13] and Quebec, software engineers can hold the Professional Engineer (P.Eng) designation and/or the Information Systems Professional (I.S.P.) designation. In Canada, there is a legal requirement to have P.Eng when one wants to use the title "engineer" or practice "software engineering". In the USA, beginning in 2013, the path for licensure of software engineers will become a reality. As with the other engineering disciplines, the requirements consist of earning an ABET accredited bachelor’s degree in Software Engineering (or any non-ABET degree and NCEES credentials evaluation), passing the Fundamentals of Engineering Exam, having at least four years of demonstrably relevant experience, and passing the Software Engineering PE Exam. In some states, such as Florida, Texas, Washington, and other, software developers cannot use the title "Professional Engineer" unless they are licensed professional engineers who have passed the PE Exam and possess a valid licence to practice.[citation needed] This license has to be periodically renewed, which is known as continuous education, to ensure engineers are kept up to date with latest techniques and safest practices.[14][15]
The IEEE Computer Society and the ACM, the two main US-based professional organizations of software engineering, publish guides to the profession of software engineering. The IEEE's Guide to the Software Engineering Body of Knowledge - 2004 Version, or SWEBOK, defines the field and describes the knowledge the IEEE expects a practicing software engineer to have. Currently, the SWEBOK v3 is being produced and will likely be released in mid-2013.[16] The IEEE also promulgates a "Software Engineering Code of Ethics".[17]
Employment[edit]
In 2004, the U. S. Bureau of Labor Statistics counted 760,840 software engineers holding jobs in the U.S.; in the same time period there were some 1.4 million practitioners employed in the U.S. in all other engineering disciplines combined.[18] Due to its relative newness as a field of study, formal education in software engineering is often taught as part of a computer science curriculum, and many software engineers hold computer science degrees.[19]
Many software engineers work as employees or contractors. Software engineers work with businesses, government agencies (civilian or military), and non-profit organizations. Some software engineers work for themselves as freelancers. Some organizations have specialists to perform each of the tasks in the software development process. Other organizations require software engineers to do many or all of them. In large projects, people may specialize in only one role. In small projects, people may fill several or all roles at the same time. Specializations include: in industry (analysts, architects, developers, testers, technical support, middleware analysts, managers) and in academia (educators, researchers).
Most software engineers and programmers work 40 hours a week, but about 15 percent of software engineers and 11 percent of programmers worked more than 50 hours a week in 2008. Injuries in these occupations are rare. However, like other workers who spend long periods in front of a computer terminal typing at a keyboard, engineers and programmers are susceptible to eyestrain, back discomfort, and hand and wrist problems such as carpal tunnel syndrome.[20]
The field's future looks bright according to Money Magazine and Salary.com, which rated Software Engineer as the best job in the United States in 2006.[21] In 2012, software engineering was again ranked as the best job in the United States, this time by CareerCast.com.[22]
Certification[edit]
The Software Engineering Institute offers certifications on specific topics like Security, Process improvement and Software architecture.[23] Apple, IBM, Microsoft and other companies also sponsor their own certification examinations. Many IT certification programs are oriented toward specific technologies, and managed by the vendors of these technologies.[24] These certification programs are tailored to the institutions that would employ people who use these technologies.
Broader certification of general software engineering skills is available through various professional societies. As of 2006, the IEEE had certified over 575 software professionals as a Certified Software Development Professional (CSDP).[25] In 2008 they added an entry-level certification known as the Certified Software Development Associate (CSDA).[26] The ACM had a professional certification program in the early 1980s,[citation needed] which was discontinued due to lack of interest. The ACM examined the possibility of professional certification of software engineers in the late 1990s, but eventually decided that such certification was inappropriate for the professional industrial practice of software engineering.[27]
In the U.K. the British Computer Society has developed a legally recognized professional certification called Chartered IT Professional (CITP), available to fully qualified Members (MBCS). Software engineers may be eligible for membership of the Institution of Engineering and Technology and so qualify for Chartered Engineer status. In Canada the Canadian Information Processing Society has developed a legally recognized professional certification called Information Systems Professional (ISP).[28] In Ontario, Canada, Software Engineers who graduate from a Canadian Engineering Accreditation Board (CEAB) accredited program, successfully complete PEO's (Professional Engineers Ontario) Professional Practice Examination (PPE) and have at least 48 months of acceptable engineering experience are eligible to be licensed through the Professional Engineers Ontario and can become Professional Engineers P.Eng.[29] The PEO does not recognize any online or distance education however; and does not consider Computer Science programs to be equivalent to software engineering programs despite the tremendous overlap between the two. This has sparked controversy and a certification war. It has also held the number of P.Eng holders for the profession exceptionally low. The vast majority of working professionals in the field hold a degree in CS, not SE. Given the difficult certification path for holders of non-SE degrees, most never bother to pursue the license.
Impact of globalization[edit]
The initial impact of outsourcing, and the relatively lower cost of international human resources in developing third world countries led to a massive migration of software development activities from corporations in North America and Europe to India and later: China, Russia, and other developing countries. This approach had some flaws, mainly the distance / timezone difference that prevented human interaction between clients and developers and the massive job transfer. This had a negative impact on many aspects of the software engineering profession. For example, some students in the developed world avoid education related to software engineering because of the fear of offshore outsourcing (importing software products or services from other countries) and of being displaced by foreign visa workers.[30] Although statistics do not currently show a threat to software engineering itself; a related career, computer programming does appear to have been affected.[31][32] Nevertheless, the ability to smartly leverage offshore and near-shore resources via the follow-the-sun workflow has improved the overall operational capability of many organizations.[33] When North Americans are leaving work, Asians are just arriving to work. When Asians are leaving work, Europeans are arriving to work. This provides a continuous ability to have human oversight on business-critical processes 24 hours per day, without paying overtime compensation or disrupting a key human resource, sleep patterns.
While global outsourcing has several advantages, global - and generally distributed - development can run into serious difficulties resulting from the distance between developers. This includes but is not limited to language, communication, cultural or corporate barriers. Handling global development successfully is subject to active research of the software engineering community.
Education[edit]

Knowledge of computer programming is a pre-requisite to becoming a software engineer. In 2004 the IEEE Computer Society produced the SWEBOK, which has been published as ISO/IEC Technical Report 1979:2004, describing the body of knowledge that they believe should be mastered by a graduate software engineer with four years of experience.[34] Many software engineers enter the profession by obtaining a university degree or training at a vocational school. One standard international curriculum for undergraduate software engineering degrees was defined by the CCSE, and updated in 2004.[35] A number of universities have Software Engineering degree programs; as of 2010, there were 244 Campus programs, 70 Online programs, 230 Masters-level programs, 41 Doctorate-level programs, and 69 Certificate-level programs in the United States.[36]
In addition to university education, many companies sponsor internships for students wishing to pursue careers in information technology. These internships can introduce the student to interesting real-world tasks that typical software engineers encounter every day. Similar experience can be gained through military service in software engineering.
Comparison with other disciplines[edit]

Major differences between software engineering and other engineering disciplines, according to some researchers, result from the costs of fabrication.[37]
Software development process[edit]

Main article: Software development process
A set of activities that leads to the production of a software product is known as software process.[38] Although most of the software are custom build, the software engineering market is being gradually shifted towards component based. Computer-aided software engineering (CASE) tools are being used to support the software process activities. However, due to the vast diversity of software processes for different types of products, the effectiveness of CASE tools is limited. There is no ideal approach to software process that has yet been developed. Some fundamental activities, like software specification, design, validation and maintenance are common to all the process activities.[38]
Models[edit]
A software process model is an abstraction of software process. These are also called process paradigms. Various general process models are waterfall model, evolutionary development model and component-based software engineering model. These are widely used in current software engineering practice. For large systems, these are used together.[39]
Waterfall model[edit]
Main article: Waterfall model
The waterfall model was one of the first published models for the software process. This model divides software processes in various phases. These phases are:[40]
Requirements analysis
Software design [41]
Unit testing
Component testing
System testing
Maintenance
Theoretically the activities should be performed individually but in practice, they often overlap. During the maintenance stage, the software is put into use. During this, additional problems might be discovered and the need of new feature may arise. This may require the software to undergo the previous phases once again.[40]
Agile model[edit]
"Agile Development" is an umbrella term for several iterative and incremental software development methodologies. Some of these methods include:
Extreme Programming (XP)
Scrum
Kanban or Lean
Crystal
Dynamic Systems Development Method (DSDM)
Feature-Driven Development (FDD)
Subdisciplines[edit]

Software engineering can be divided into ten subdisciplines. They are:[1]
Software requirements: The elicitation, analysis, specification, and validation of requirements for software.
Software design: The process of defining the architecture, components, interfaces, and other characteristics of a system or component. It is also defined as the result of that process.
Software construction: The detailed creation of working, meaningful software through a combination of coding, verification, unit testing, integration testing, and debugging.
Software testing: The dynamic verification of the behavior of a program on a finite set of test cases, suitably selected from the usually infinite executions domain, against the expected behavior.
Software maintenance: The totality of activities required to provide cost-effective support to software.
Software configuration management: The identification of the configuration of a system at distinct points in time for the purpose of systematically controlling changes to the configuration, and maintaining the integrity and traceability of the configuration throughout the system life cycle.
Software engineering management: The application of management activities—planning, coordinating, measuring, monitoring, controlling, and reporting—to ensure that the development and maintenance of software is systematic, disciplined, and quantified.
Software engineering process: The definition, implementation, assessment, measurement, management, change, and improvement of the software life cycle process itself.
Software engineering tools and methods: The computer-based tools that are intended to assist the software life cycle processes, see Computer Aided Software Engineering, and the methods which impose structure on the software engineering activity with the goal of making the activity systematic and ultimately more likely to be successful.
Software quality: The degree to which a set of inherent characteristics fulfills requirements.
Related disciplines[edit]

Software engineering is a direct subfield of computer science and has some relations with management science. It is also considered a part of overall systems engineering.
Systems engineering[edit]
Systems engineers deal primarily with the overall system requirements and design, including hardware and human issues.
See also[edit]

Portal icon	Software portal
Portal icon	Software Testing portal
Main article: Outline of software engineering
Bachelor of Science in Information Technology
Bachelor of Software Engineering
List of software engineering conferences
List of software engineering publications
Software craftsmanship
Notes[edit]

^ Jump up to: a b Abran et al. 2004, pp. 1–1
Jump up ^ ACM (2006). "Computing Degrees & Careers". ACM. Retrieved 2010-11-23.
Jump up ^ Laplante, Phillip (2007). What Every Engineer Should Know about Software Engineering. Boca Raton: CRC. ISBN 978-0-8493-7228-5. Retrieved 2011-01-21.
Jump up ^ Sommerville 2008, p. 26
Jump up ^ Peter, Naur; Brian Randell (7–11 October 1968). "Software Engineering: Report of a conference sponsored by the NATO Science Committee" (PDF). Garmisch, Germany: Scientific Affairs Division, NATO. Retrieved 2008-12-26.
Jump up ^ Randell, Brian (10 August 2001). "The 1968/69 NATO Software Engineering Reports". Brian Randell's University Homepage. The School of the Computer Sciences, Newcastle University. Retrieved 2008-10-11. "The idea for the first NATO Software Engineering Conference, and in particular that of adopting the then practically unknown term "software engineering" as its (deliberately provocative) title, I believe came originally from Professor Fritz Bauer."
Jump up ^ "ISO/IEC TR 19759:2005". Retrieved 2012-04-01.
Jump up ^ "NCEES Software Engineering Exam Specifications". Retrieved 2012-04-01.
Jump up ^ Leondes (2002). intelligent systems: technology and applications. CRC Press. ISBN 978-0-8493-1121-5.
Jump up ^ Dijkstra, E. W. (March 1968). "Go To Statement Considered Harmful". Communications of the ACM 11 (3): 147–148. doi:10.1145/362929.362947. Retrieved 2009-08-10.
Jump up ^ Parnas, David (December 1972). "On the Criteria To Be Used in Decomposing Systems into Modules". Communications of the ACM 15 (12): 1053–1058. doi:10.1145/361598.361623. Retrieved 2008-12-26.
Jump up ^ Raymond, Eric S. The Cathedral and the Bazaar. ed 3.0. 2000.
Jump up ^ Williams, N.S.W. (19–21 February 2001). "Professional Engineers Ontario's approach to licensing software engineering practitioners". Software Engineering Education and Training, 2001 Proceedings. 14th Conference on. Charlotte, NC: IEEE. pp. 77–78.
Jump up ^ "''IEEE-USA Offers Study Guide for Software Engineering Licensure Exam''". Retrieved 2012-11-05.
Jump up ^ "''NCEES Principles and Practice of Engineering Examination Software Engineering Exam Specifications''" (pdf). Retrieved 2012-11-05.
Jump up ^ "'SWEBOK Guide Version 3'". Retrieved 2012-11-14.
Jump up ^ "''Software Engineering Code of Ethics''" (PDF). Retrieved 2012-03-25.
Jump up ^ Bureau of Labor Statistics, U.S. Department of Labor, USDL 05-2145: Occupational Employment and Wages, November 2004, Table 1.
Jump up ^ "Software Engineering". Retrieved 2008-02-01.
Jump up ^ "Computer Software Engineers and Computer Programmers". Retrieved 2009-12-17.
Jump up ^ Kalwarski, Tara; Daphne Mosher, Janet Paskin and Donna Rosato (2006). "Best Jobs in America". MONEY Magazine. CNN. Retrieved 2006-04-20.
Jump up ^ "Best and Worst Jobs of 2012". online.wsj.com. Retrieved 2012.
Jump up ^ "SEI certification page". Sei.cmu.edu. Retrieved 2012-03-25.
Jump up ^ Wyrostek, Warren (March 14, 2008). "The Top 10 Problems with IT Certification in 2008". InformIT. Retrieved 2009-03-03.
Jump up ^ IEEE Computer Society. "2006 IEEE computer society report to the IFIP General Assembly" (PDF). Retrieved 2007-04-10.
Jump up ^ IEEE. "CSDA". Retrieved 2010-04-20.
Jump up ^ ACM (July 17, 2000). "A Summary of the ACM Position on Software Engineering as a Licensed Engineering Profession". Association for Computing Machinery (ACM). Retrieved 2009-03-03. "At its meeting in May 2000, the Council further concluded that the framework of a licensed professional engineer, originally developed for civil engineers, does not match the professional industrial practice of software engineering. Such licensing practices would give false assurances of competence even if the body of knowledge were mature; and would preclude many of the most qualified software engineers from becoming licensed."[dead link]
Jump up ^ Canadian Information Processing Society. "I.S.P. Designation". Retrieved 2007-03-15.
Jump up ^ "Professional Engineers Ontario: Welcome to PEO's website". Peo.on.ca. Retrieved 2012-03-25.
Jump up ^ Thibodeau, Patrick (2006-05-05). "As outsourcing gathers steam, computer science interest wanes". Computerworld.com. Retrieved 2012-03-25.
Jump up ^ "Computer Programmers". Bls.gov. Retrieved 2012-03-25.
Jump up ^ Mullins, Robert (2007-03-13). "Software developer growth slows in North America". InfoWorld. Retrieved 2012-03-25.
Jump up ^ "Gartner Magic Quadrant". Cognizant.com. Retrieved 2012-03-25.
Jump up ^ Abran, Alain, ed. (2005) [2004]. "Chapter 1: Introduction to the Guide". Guide to the Software Engineering Body of Knowledge. Los Alamitos: IEEE Computer Society. ISBN 0-7695-2330-7. Retrieved 2010-09-13. "The total volume of cited literature is intended to be suitable for mastery through the completion of an undergraduate education plus four years of experience."
Jump up ^ "SE2004 Software Engineering Curriculum". Sites.computer.org. 2003-09-30. Retrieved 2012-03-25.
Jump up ^ [1] Degree programs in Software Engineering
Jump up ^ Young, Michal; Faulk, Stuart (2010). "Sharing What We Know About Software Engineering" (PDF). Proceedings of the FSE/SDP workshop on Future of software engineering research (FoSER '10). ACM. pp. 439–442. doi:10.1145/1882362.1882451. ISBN 978-1-4503-0427-6. Retrieved 2011-02-25. "The essential distinction between software and other engineered artifacts has always been the absence of fabrication cost. In conventional engineering of physical artifacts, the cost of materials and fabrication has dominated the cost of design and placed a check on the complexity of artifacts that can be designed. When one bottleneck is removed, others appear, and software engineering has therefore faced the essential challenges of complexity and the cost of design to an extent that conventional engineering has not. Software engineering has focused on issues in managing complexity, from process to modular design to cost-effective verification, because that is the primary leverage point when the costs of materials and fabrication are nil."
^ Jump up to: a b Sommerville 2008, p. 86
Jump up ^ Sommerville 2008, p. 87
^ Jump up to: a b Sommerville 2008, p. 89
Jump up ^ *Software Construction
References[edit]

Abran, Alain; Moore, James W.; Bourque, Pierre; Dupuis, Robert; Tripp, Leonard L. (2004). Guide to the Software Engineering Body of Knowledge. IEEE. ISBN 0-7695-2330-7.
Sommerville, Ian (2008). Software Engineering (7 ed.). Pearson Education. ISBN 978-81-7758-530-8. Retrieved 10 January 2013.
Further reading[edit]

Ghezzi, Carlo; Mehdi Jazayeri, Dino Mandrioli (2003) [1991]. Fundamentals of Software Engineering (2nd (International) ed.). Pearson Education @ Prentice-Hall.
Jalote, Pankaj (2005) [1991]. An Integrated Approach to Software Engineering (3rd ed.). Springer. ISBN 0-387-20881-X.
Pressman, Roger S (2005). Software Engineering: A Practitioner's Approach (6th ed.). Boston, Mass: McGraw-Hill. ISBN 0-07-285318-2.
Sommerville, Ian (2007) [1982]. Software Engineering (8th ed.). Harlow, England: Pearson Education. ISBN 0-321-31379-8.
External links[edit]

	Wikimedia Commons has media related to Software engineering.
	Wikibooks has a book on the topic of: Introduction to Software Engineering
Guide to the Software Engineering Body of Knowledge
Computer Software Engineers - Definition and statistics from the U.S. Bureau of Labor Statistics
A Student's Guide to Software Engineering Projects - a free online guide for students taking SE project courses
The Open Systems Engineering and Software Development Life Cycle Framework OpenSDLC.org the integrated Creative Commons SDLC
Function Oriented vs Object Oriented Software Engineering
[show] v t e
Software engineering
[show] v t e
Engineering
[show] v t e
Major fields of computer science
[show] v t e
Technology
Categories: Software engineeringEngineering disciplines
DDD - the Data Display Debugger
About DDD
DDD News
Getting DDD
Building DDD
Documentation
Alpha Releases
Reporting Bugs
Where can I learn more about the debuggers DDD uses?
Help and Assistance
References
What is DDD?

GNU DDD is a graphical front-end for command-line debuggers such as GDB, DBX, WDB, Ladebug, JDB, XDB, the Perl debugger, the bash debugger bashdb, the GNU Make debugger remake, or the Python debugger pydb. Besides ``usual'' front-end features such as viewing source texts, DDD has become famous through its interactive graphical data display, where data structures are displayed as graphs.
DDD Plots  Debugger Settings Registers Signals

For more information (and more screenshots), see the DDD Manual.

DDD News

(2013/01/18) Shaunak Saha is the new maintainer of DDD.
(2009/02/11) DDD 3.3.12 is now available from ftp.gnu.org. DDD 3.3.12 features much improved support for debugging Python, Bash and Make, as well as various bug fixes.
(2008/11/07) Release candidate 3.3.12-rc1 is available. DDD can now be used effectively to debug Python, Bash and Makefiles. You can grab the new release candidate from alpha.gnu.org. The source tarball is signed with the maintainer's GPG public key, which you can download from Savannah.
(2008/10/22) DDD has a bug tracker on Savannah. The bug tracker is the best way to report bugs (use "Bugs" on the toolbar, and "Submit"). You are encouraged to login, but you can post bug anonymously if you want. Posting directly to the bug-ddd mailing list is now deprecated, since the tracker is a much more powerful way to organise the information. Please follow the instructions for bug reporting.
(2008/10/19) Jose Maria Gomez Vergara has handed maintainership of DDD to Peter Wainwright.
Older News.
Where do I get DDD source?

DDD can be found at /gnu/ddd/ on ftp.gnu.org, on Savannah or at any GNU FTP mirror near you. The ddd/ directory contains the DDD source distribution:
ddd-version.tar.gz -- this package is the one you want. It includes
the complete DDD source code,
building instructions, as well as
the DDD manual in TeXinfo, Info, PostScript, and PDF formats.
Here are further instructions on how to download and unpack GNU packages.

You can support the principle of software freedom by buying stuff from the FSF shop.

Where do I get DDD binaries?

The FSF does not distribute DDD binaries. You can ask for help if you need technical support.
DDD binaries for GNU/Linux are typically available via your GNU/Linux distributor:

DDD packages for Debian GNU/Linux are found here.
DDD RPMs can be found in http://rpmfind.net/linux/rpm2html/search.php?query=ddd.
The written word provides binaries of freely available software for various platforms. Their FTP server contains DDD and XPM packages.

What do I need to build DDD?

To build DDD from sources, you need
The DDD source distribution (see above).
The GNU compiler collection (GCC), version 3.0 or higher (or another ISO C++ compiler).
The LessTif user interface toolkit, version 0.89 or higher (or another Motif-compatible user interface toolkit).
The simplest way to build and install DDD is:
Unpack the DDD source distribution
Change into the ddd-version subdirectory
Type ./configure && make.
If the above doesn't give an error, type make install to install the program. (Depending on your OS and permission level you might need to use sudo make install to install instead.)
To run DDD, you need the GNU debugger (GDB), version 4.16 or later (or depending on the program to be debugged, possibly other command-line debuggers such as Ladebug, JDB, XDB, the Perl debugger, the bash debugger bashdb, the GNU Make debugger remake, or the Python debugger pydb.)
How do I get started with DDD?

The DDD Manual contains a detailed tutorial.
Here are some free third-party tutorials on the Web:

There's an article on DDD in Dr. Dobb's Journal.
Linux Magazin has articles (in German) on debugging with GDB and DDD.
LinuxFocus has a DDD tutorial in English, Spanish, German, French, Korean, and Turkish.
Where do I get DDD alpha releases?

The DDD Subversion repository (containing all versions of DDD, including the very latest changes) is available via http://savannah.gnu.org/projects/ddd.
I have found a bug! How do I report it?

You can report bugs on the bug tracker. Before you do this, please check the following:
Please try to see whether your bug has already been reported. You can browse or search the bug tracker.
Please read the section ``Bugs and How to Report Them'' toward the end of the DDD Manual.
Be sure to include a copy of your ~/.ddd/log file which tells your DDD configuration as well as the interaction between DDD and the underlying command-line debugger.
Remember, the more (relevant) information you put in your bug report, the more likely it is to be fixed rapidly.
The purpose of reporting a bug is to enable the bug to be fixed for the sake of the whole community of users. You may or may not receive a response; the maintainers will send one if that helps them find or verify a fix. Most GNU maintainers are volunteers and all are overworked; they don't have time to help individuals and still fix the bugs and make the improvements that everyone wants. If you want help for yourself in particular, you may have to hire someone for technical support.

If you are willing to help fixing DDD bugs, you can subscribe to the bug-ddd mailing list or access its archives.

I have a question regarding DDD. Where do I get assistance?

We have a general-purpose mailing list devoted to DDD. You can ask any questions to ddd at gnu.org. Patches and new releases are also announced here. Subscription info and mailing list archives are available. Owing to abuse by spammers, it is necessary to subscribe before posting to the list.
If you need technical support on DDD, you can ask for technical support.

Where can I learn more about the debuggers DDD uses?

As mentioned above, DDD runs a number of debuggers under the scenes. One can issue commands directly to those debuggers. Below are links for these debuggers:
GNU Debugger: gdb
Perl Debugger: perl -d
Bash Debugger: bashdb
Python Debugger: pydb
GNU Make Debugger: remake
dbx: dbx
Ladebug: ladebug
(To do: expand the above for more references on each debugger, e.g, tutorials, books, video demos.)

Where can I learn more about debugging and debuggers?

Here are some other related resources:
LessTif or Open Motif. A window library needed to compile DDD.
HP Wildebeest (WDB). A port of GDB to PA-RISC/HP-UX, by HP.
Insight. A very nice GUI for GDB from Redhat, the GDB maintainers.
KDbg. A KDE-based GDB Interface with inspection of variable values in a tree structure.
xxgdb. The oldest and simplest X interface for GDB and DBX.
tgdb. A Tcl/Tk GDB interface (similar to Turbo Debugger or CodeView).
deet. A simple and extensible graphical debugger.
A list of available Perl debuggers. The ultimate Perl reference.
A GUI for the Perl Debugger. Written in Perl.
GNU Nana. Improved support for assertions and logging in C and C++.
GNU Checker. A tool to find memory errors at runtime
xwpe. A programming environment integrating a program editor with an external debugger.
Valgrind. No-one developing C or C++ code under Linux/x86 or Linux/PPC should be without it.
Have fun with DDD!

Current Maintainer: 
Shaunak Saha <shaunak at gnu.org>


Former Maintainers: 
Peter Wainwright <peter dot wainwright at ieee dot org>

Andreas Zeller <zeller at gnu.org>

Andrew Gaylard <apg at users dot sf dot net>

Jose María Gómez Vergara <josemaria at jmgv dot org>

Return to GNU's home page.
Please send FSF & GNU inquiries & questions to gnu at gnu.org. There are also other ways to contact the FSF.

Please send comments on these web pages to bug-ddd at gnu.org.

Copyright © 2000-2011 Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA

Verbatim copying and distribution of this entire article is permitted in any medium, provided this notice is preserved.

Updated: $Date: 2013/08/23 08:56:53 $ $Author: shaunak $
GNU gprof

This manual describes the GNU profiler, gprof, and how you can use it to determine which parts of a program are taking most of the execution time. We assume that you know how to write, compile, and execute programs. GNU gprof was written by Jay Fenlason.

This manual was edited January 1993 by Jeffrey Osier.

Copyright (C) 1988, 1992 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual into another language, under the same conditions as for modified versions.

Why Profile

Profiling allows you to learn where your program spent its time and which functions called which other functions while it was executing. This information can show you which pieces of your program are slower than you expected, and might be candidates for rewriting to make your program execute faster. It can also tell you which functions are being called more or less often than you expected. This may help you spot bugs that had otherwise been unnoticed.

Since the profiler uses information collected during the actual execution of your program, it can be used on programs that are too large or too complex to analyze by reading the source. However, how your program is run will affect the information that shows up in the profile data. If you don't use some feature of your program while it is being profiled, no profile information will be generated for that feature.

Profiling has several steps:

You must compile and link your program with profiling enabled. See section Compiling a Program for Profiling.
You must execute your program to generate a profile data file. See section Executing the Program to Generate Profile Data.
You must run gprof to analyze the profile data. See section gprof Command Summary.
The next three chapters explain these steps in greater detail.

The result of the analysis is a file containing two tables, the flat profile and the call graph (plus blurbs which briefly explain the contents of these tables).

The flat profile shows how much time your program spent in each function, and how many times that function was called. If you simply want to know which functions burn most of the cycles, it is stated concisely here. See section How to Understand the Flat Profile.

The call graph shows, for each function, which functions called it, which other functions it called, and how many times. There is also an estimate of how much time was spent in the subroutines of each function. This can suggest places where you might try to eliminate function calls that use a lot of time. See section How to Read the Call Graph.

Compiling a Program for Profiling

The first step in generating profile information for your program is to compile and link it with profiling enabled.

To compile a source file for profiling, specify the `-pg' option when you run the compiler. (This is in addition to the options you normally use.)

To link the program for profiling, if you use a compiler such as cc to do the linking, simply specify `-pg' in addition to your usual options. The same option, `-pg', alters either compilation or linking to do what is necessary for profiling. Here are examples:

cc -g -c myprog.c utils.c -pg
cc -o myprog myprog.o utils.o -pg
The `-pg' option also works with a command that both compiles and links:

cc -o myprog myprog.c utils.c -g -pg
If you run the linker ld directly instead of through a compiler such as cc, you must specify the profiling startup file `/lib/gcrt0.o' as the first input file instead of the usual startup file `/lib/crt0.o'. In addition, you would probably want to specify the profiling C library, `/usr/lib/libc_p.a', by writing `-lc_p' instead of the usual `-lc'. This is not absolutely necessary, but doing this gives you number-of-calls information for standard library functions such as read and open. For example:

ld -o myprog /lib/gcrt0.o myprog.o utils.o -lc_p
If you compile only some of the modules of the program with `-pg', you can still profile the program, but you won't get complete information about the modules that were compiled without `-pg'. The only information you get for the functions in those modules is the total time spent in them; there is no record of how many times they were called, or from where. This will not affect the flat profile (except that the calls field for the functions will be blank), but will greatly reduce the usefulness of the call graph.

Executing the Program to Generate Profile Data

Once the program is compiled for profiling, you must run it in order to generate the information that gprof needs. Simply run the program as usual, using the normal arguments, file names, etc. The program should run normally, producing the same output as usual. It will, however, run somewhat slower than normal because of the time spent collecting and the writing the profile data.

The way you run the program--the arguments and input that you give it--may have a dramatic effect on what the profile information shows. The profile data will describe the parts of the program that were activated for the particular input you use. For example, if the first command you give to your program is to quit, the profile data will show the time used in initialization and in cleanup, but not much else.

You program will write the profile data into a file called `gmon.out' just before exiting. If there is already a file called `gmon.out', its contents are overwritten. There is currently no way to tell the program to write the profile data under a different name, but you can rename the file afterward if you are concerned that it may be overwritten.

In order to write the `gmon.out' file properly, your program must exit normally: by returning from main or by calling exit. Calling the low-level function _exit does not write the profile data, and neither does abnormal termination due to an unhandled signal.

The `gmon.out' file is written in the program's current working directory at the time it exits. This means that if your program calls chdir, the `gmon.out' file will be left in the last directory your program chdir'd to. If you don't have permission to write in this directory, the file is not written. You may get a confusing error message if this happens. (We have not yet replaced the part of Unix responsible for this; when we do, we will make the error message comprehensible.)

gprof Command Summary

After you have a profile data file `gmon.out', you can run gprof to interpret the information in it. The gprof program prints a flat profile and a call graph on standard output. Typically you would redirect the output of gprof into a file with `>'.

You run gprof like this:

gprof options [executable-file [profile-data-files...]] [> outfile]
Here square-brackets indicate optional arguments.

If you omit the executable file name, the file `a.out' is used. If you give no profile data file name, the file `gmon.out' is used. If any file is not in the proper format, or if the profile data file does not appear to belong to the executable file, an error message is printed.

You can give more than one profile data file by entering all their names after the executable file name; then the statistics in all the data files are summed together.

The following options may be used to selectively include or exclude functions in the output:

-a
The `-a' option causes gprof to suppress the printing of statically declared (private) functions. (These are functions whose names are not listed as global, and which are not visible outside the file/function/block where they were defined.) Time spent in these functions, calls to/from them, etc, will all be attributed to the function that was loaded directly before it in the executable file. This option affects both the flat profile and the call graph.
-e function_name
The `-e function' option tells gprof to not print information about the function function_name (and its children...) in the call graph. The function will still be listed as a child of any functions that call it, but its index number will be shown as `[not printed]'. More than one `-e' option may be given; only one function_name may be indicated with each `-e' option.
-E function_name
The -E function option works like the -e option, but time spent in the function (and children who were not called from anywhere else), will not be used to compute the percentages-of-time for the call graph. More than one `-E' option may be given; only one function_name may be indicated with each `-E' option.
-f function_name
The `-f function' option causes gprof to limit the call graph to the function function_name and its children (and their children...). More than one `-f' option may be given; only one function_name may be indicated with each `-f' option.
-F function_name
The `-F function' option works like the -f option, but only time spent in the function and its children (and their children...) will be used to determine total-time and percentages-of-time for the call graph. More than one `-F' option may be given; only one function_name may be indicated with each `-F' option. The `-F' option overrides the `-E' option.
-k from... to...
The `-k' option allows you to delete from the profile any arcs from routine from to routine to.
-v
The `-v' flag causes gprof to print the current version number, and then exit.
-z
If you give the `-z' option, gprof will mention all functions in the flat profile, even those that were never called, and that had no time spent in them. This is useful in conjunction with the `-c' option for discovering which routines were never called.
The order of these options does not matter.

Note that only one function can be specified with each -e, -E, -f or -F option. To specify more than one function, use multiple options. For example, this command:

gprof -e boring -f foo -f bar myprogram > gprof.output
lists in the call graph all functions that were reached from either foo or bar and were not reachable from boring.

There are a few other useful gprof options:

-b
If the `-b' option is given, gprof doesn't print the verbose blurbs that try to explain the meaning of all of the fields in the tables. This is useful if you intend to print out the output, or are tired of seeing the blurbs.
-c
The `-c' option causes the static call-graph of the program to be discovered by a heuristic which examines the text space of the object file. Static-only parents or children are indicated with call counts of `0'.
-d num
The `-d num' option specifies debugging options.
-s
The `-s' option causes gprof to summarize the information in the profile data files it read in, and write out a profile data file called `gmon.sum', which contains all the information from the profile data files that gprof read in. The file `gmon.sum' may be one of the specified input files; the effect of this is to merge the data in the other input files into `gmon.sum'. See section Statistical Inaccuracy of gprof Output.
Eventually you can run gprof again without `-s' to analyze the cumulative data in the file `gmon.sum'.

-T
The `-T' option causes gprof to print its output in "traditional" BSD style.

How to Understand the Flat Profile

The flat profile shows the total amount of time your program spent executing each function. Unless the `-z' option is given, functions with no apparent time spent in them, and no apparent calls to them, are not mentioned. Note that if a function was not compiled for profiling, and didn't run long enough to show up on the program counter histogram, it will be indistinguishable from a function that was never called.

This is part of a flat profile for a small program:

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 33.34      0.02     0.02     7208     0.00     0.00  open
 16.67      0.03     0.01      244     0.04     0.12  offtime
 16.67      0.04     0.01        8     1.25     1.25  memccpy
 16.67      0.05     0.01        7     1.43     1.43  write
 16.67      0.06     0.01                             mcount
  0.00      0.06     0.00      236     0.00     0.00  tzset
  0.00      0.06     0.00      192     0.00     0.00  tolower
  0.00      0.06     0.00       47     0.00     0.00  strlen
  0.00      0.06     0.00       45     0.00     0.00  strchr
  0.00      0.06     0.00        1     0.00    50.00  main
  0.00      0.06     0.00        1     0.00     0.00  memcpy
  0.00      0.06     0.00        1     0.00    10.11  print
  0.00      0.06     0.00        1     0.00     0.00  profil
  0.00      0.06     0.00        1     0.00    50.00  report
...
The functions are sorted by decreasing run-time spent in them. The functions `mcount' and `profil' are part of the profiling aparatus and appear in every flat profile; their time gives a measure of the amount of overhead due to profiling.

The sampling period estimates the margin of error in each of the time figures. A time figure that is not much larger than this is not reliable. In this example, the `self seconds' field for `mcount' might well be `0' or `0.04' in another run. See section Statistical Inaccuracy of gprof Output, for a complete discussion.

Here is what the fields in each line mean:

% time
This is the percentage of the total execution time your program spent in this function. These should all add up to 100%.
cumulative seconds
This is the cumulative total number of seconds the computer spent executing this functions, plus the time spent in all the functions above this one in this table.
self seconds
This is the number of seconds accounted for by this function alone. The flat profile listing is sorted first by this number.
calls
This is the total number of times the function was called. If the function was never called, or the number of times it was called cannot be determined (probably because the function was not compiled with profiling enabled), the calls field is blank.
self ms/call
This represents the average number of milliseconds spent in this function per call, if this function is profiled. Otherwise, this field is blank for this function.
total ms/call
This represents the average number of milliseconds spent in this function and its descendants per call, if this function is profiled. Otherwise, this field is blank for this function.
name
This is the name of the function. The flat profile is sorted by this field alphabetically after the self seconds field is sorted.

How to Read the Call Graph

The call graph shows how much time was spent in each function and its children. From this information, you can find functions that, while they themselves may not have used much time, called other functions that did use unusual amounts of time.

Here is a sample call from a small program. This call came from the same gprof run as the flat profile example in the previous chapter.

granularity: each sample hit covers 2 byte(s) for 20.00% of 0.05 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.05                 start [1]
                0.00    0.05       1/1           main [2]
                0.00    0.00       1/2           on_exit [28]
                0.00    0.00       1/1           exit [59]
-----------------------------------------------
                0.00    0.05       1/1           start [1]
[2]    100.0    0.00    0.05       1         main [2]
                0.00    0.05       1/1           report [3]
-----------------------------------------------
                0.00    0.05       1/1           main [2]
[3]    100.0    0.00    0.05       1         report [3]
                0.00    0.03       8/8           timelocal [6]
                0.00    0.01       1/1           print [9]
                0.00    0.01       9/9           fgets [12]
                0.00    0.00      12/34          strncmp <cycle 1> [40]
                0.00    0.00       8/8           lookup [20]
                0.00    0.00       1/1           fopen [21]
                0.00    0.00       8/8           chewtime [24]
                0.00    0.00       8/16          skipspace [44]
-----------------------------------------------
[4]     59.8    0.01        0.02       8+472     <cycle 2 as a whole>	[4]
                0.01        0.02     244+260         offtime <cycle 2> [7]
                0.00        0.00     236+1           tzset <cycle 2> [26]
-----------------------------------------------
The lines full of dashes divide this table into entries, one for each function. Each entry has one or more lines.

In each entry, the primary line is the one that starts with an index number in square brackets. The end of this line says which function the entry is for. The preceding lines in the entry describe the callers of this function and the following lines describe its subroutines (also called children when we speak of the call graph).

The entries are sorted by time spent in the function and its subroutines.

The internal profiling function mcount (see section How to Understand the Flat Profile) is never mentioned in the call graph.

The Primary Line

The primary line in a call graph entry is the line that describes the function which the entry is about and gives the overall statistics for this function.

For reference, we repeat the primary line from the entry for function report in our main example, together with the heading line that shows the names of the fields:

index  % time    self  children called     name
...
[3]    100.0    0.00    0.05       1         report [3]
Here is what the fields in the primary line mean:

index
Entries are numbered with consecutive integers. Each function therefore has an index number, which appears at the beginning of its primary line.
Each cross-reference to a function, as a caller or subroutine of another, gives its index number as well as its name. The index number guides you if you wish to look for the entry for that function.

% time
This is the percentage of the total time that was spent in this function, including time spent in subroutines called from this function.
The time spent in this function is counted again for the callers of this function. Therefore, adding up these percentages is meaningless.

self
This is the total amount of time spent in this function. This should be identical to the number printed in the seconds field for this function in the flat profile.
children
This is the total amount of time spent in the subroutine calls made by this function. This should be equal to the sum of all the self and children entries of the children listed directly below this function.
called
This is the number of times the function was called.
If the function called itself recursively, there are two numbers, separated by a `+'. The first number counts non-recursive calls, and the second counts recursive calls.

In the example above, the function report was called once from main.

name
This is the name of the current function. The index number is repeated after it.
If the function is part of a cycle of recursion, the cycle number is printed between the function's name and the index number (see section How Mutually Recursive Functions Are Described). For example, if function gnurr is part of cycle number one, and has index number twelve, its primary line would be end like this:

gnurr <cycle 1> [12]
Lines for a Function's Callers

A function's entry has a line for each function it was called by. These lines' fields correspond to the fields of the primary line, but their meanings are different because of the difference in context.

For reference, we repeat two lines from the entry for the function report, the primary line and one caller-line preceding it, together with the heading line that shows the names of the fields:

index  % time    self  children called     name
...
                0.00    0.05       1/1           main [2]
[3]    100.0    0.00    0.05       1         report [3]
Here are the meanings of the fields in the caller-line for report called from main:

self
An estimate of the amount of time spent in report itself when it was called from main.
children
An estimate of the amount of time spent in subroutines of report when report was called from main.
The sum of the self and children fields is an estimate of the amount of time spent within calls to report from main.

called
Two numbers: the number of times report was called from main, followed by the total number of nonrecursive calls to report from all its callers.
name and index number
The name of the caller of report to which this line applies, followed by the caller's index number.
Not all functions have entries in the call graph; some options to gprof request the omission of certain functions. When a caller has no entry of its own, it still has caller-lines in the entries of the functions it calls.

If the caller is part of a recursion cycle, the cycle number is printed between the name and the index number.

If the identity of the callers of a function cannot be determined, a dummy caller-line is printed which has `<spontaneous>' as the "caller's name" and all other fields blank. This can happen for signal handlers.

Lines for a Function's Subroutines

A function's entry has a line for each of its subroutines--in other words, a line for each other function that it called. These lines' fields correspond to the fields of the primary line, but their meanings are different because of the difference in context.

For reference, we repeat two lines from the entry for the function main, the primary line and a line for a subroutine, together with the heading line that shows the names of the fields:

index  % time    self  children called     name
...
[2]    100.0    0.00    0.05       1         main [2]
                0.00    0.05       1/1           report [3]
Here are the meanings of the fields in the subroutine-line for main calling report:

self
An estimate of the amount of time spent directly within report when report was called from main.
children
An estimate of the amount of time spent in subroutines of report when report was called from main.
The sum of the self and children fields is an estimate of the total time spent in calls to report from main.

called
Two numbers, the number of calls to report from main followed by the total number of nonrecursive calls to report.
name
The name of the subroutine of main to which this line applies, followed by the subroutine's index number.
If the caller is part of a recursion cycle, the cycle number is printed between the name and the index number.


How Mutually Recursive Functions Are Described

The graph may be complicated by the presence of cycles of recursion in the call graph. A cycle exists if a function calls another function that (directly or indirectly) calls (or appears to call) the original function. For example: if a calls b, and b calls a, then a and b form a cycle.

Whenever there are call-paths both ways between a pair of functions, they belong to the same cycle. If a and b call each other and b and c call each other, all three make one cycle. Note that even if b only calls a if it was not called from a, gprof cannot determine this, so a and b are still considered a cycle.

The cycles are numbered with consecutive integers. When a function belongs to a cycle, each time the function name appears in the call graph it is followed by `<cycle number>'.

The reason cycles matter is that they make the time values in the call graph paradoxical. The "time spent in children" of a should include the time spent in its subroutine b and in b's subroutines--but one of b's subroutines is a! How much of a's time should be included in the children of a, when a is indirectly recursive?

The way gprof resolves this paradox is by creating a single entry for the cycle as a whole. The primary line of this entry describes the total time spent directly in the functions of the cycle. The "subroutines" of the cycle are the individual functions of the cycle, and all other functions that were called directly by them. The "callers" of the cycle are the functions, outside the cycle, that called functions in the cycle.

Here is an example portion of a call graph which shows a cycle containing functions a and b. The cycle was entered by a call to a from main; both a and b called c.

index  % time    self  children called     name
----------------------------------------
                 1.77        0    1/1        main [2]
[3]     91.71    1.77        0    1+5    <cycle 1 as a whole> [3]
                 1.02        0    3          b <cycle 1> [4]
                 0.75        0    2          a <cycle 1> [5]
----------------------------------------
                                  3          a <cycle 1> [5]
[4]     52.85    1.02        0    0      b <cycle 1> [4]
                                  2          a <cycle 1> [5]
                    0        0    3/6        c [6]
----------------------------------------
                 1.77        0    1/1        main [2]
                                  2          b <cycle 1> [4]
[5]     38.86    0.75        0    1      a <cycle 1> [5]
                                  3          b <cycle 1> [4]
                    0        0    3/6        c [6]
----------------------------------------
(The entire call graph for this program contains in addition an entry for main, which calls a, and an entry for c, with callers a and b.)

index  % time    self  children called     name
                                             <spontaneous>
[1]    100.00       0     1.93    0      start [1]
                 0.16     1.77    1/1        main [2]
----------------------------------------
                 0.16     1.77    1/1        start [1]
[2]    100.00    0.16     1.77    1      main [2]
                 1.77        0    1/1        a <cycle 1> [5]
----------------------------------------
                 1.77        0    1/1        main [2]
[3]     91.71    1.77        0    1+5    <cycle 1 as a whole> [3]
                 1.02        0    3          b <cycle 1> [4]
                 0.75        0    2          a <cycle 1> [5]
                    0        0    6/6        c [6]
----------------------------------------
                                  3          a <cycle 1> [5]
[4]     52.85    1.02        0    0      b <cycle 1> [4]
                                  2          a <cycle 1> [5]
                    0        0    3/6        c [6]
----------------------------------------
                 1.77        0    1/1        main [2]
                                  2          b <cycle 1> [4]
[5]     38.86    0.75        0    1      a <cycle 1> [5]
                                  3          b <cycle 1> [4]
                    0        0    3/6        c [6]
----------------------------------------
                    0        0    3/6        b <cycle 1> [4]
                    0        0    3/6        a <cycle 1> [5]
[6]      0.00       0        0    6      c [6]
----------------------------------------
The self field of the cycle's primary line is the total time spent in all the functions of the cycle. It equals the sum of the self fields for the individual functions in the cycle, found in the entry in the subroutine lines for these functions.

The children fields of the cycle's primary line and subroutine lines count only subroutines outside the cycle. Even though a calls b, the time spent in those calls to b is not counted in a's children time. Thus, we do not encounter the problem of what to do when the time in those calls to b includes indirect recursive calls back to a.

The children field of a caller-line in the cycle's entry estimates the amount of time spent in the whole cycle, and its other subroutines, on the times when that caller called a function in the cycle.

The calls field in the primary line for the cycle has two numbers: first, the number of times functions in the cycle were called by functions outside the cycle; second, the number of times they were called by functions in the cycle (including times when a function in the cycle calls itself). This is a generalization of the usual split into nonrecursive and recursive calls.

The calls field of a subroutine-line for a cycle member in the cycle's entry says how many time that function was called from functions in the cycle. The total of all these is the second number in the primary line's calls field.

In the individual entry for a function in a cycle, the other functions in the same cycle can appear as subroutines and as callers. These lines show how many times each function in the cycle called or was called from each other function in the cycle. The self and children fields in these lines are blank because of the difficulty of defining meanings for them when recursion is going on.

Implementation of Profiling

Profiling works by changing how every function in your program is compiled so that when it is called, it will stash away some information about where it was called from. From this, the profiler can figure out what function called it, and can count how many times it was called. This change is made by the compiler when your program is compiled with the `-pg' option.

Profiling also involves watching your program as it runs, and keeping a histogram of where the program counter happens to be every now and then. Typically the program counter is looked at around 100 times per second of run time, but the exact frequency may vary from system to system.

A special startup routine allocates memory for the histogram and sets up a clock signal handler to make entries in it. Use of this special startup routine is one of the effects of using `gcc ... -pg' to link. The startup file also includes an `exit' function which is responsible for writing the file `gmon.out'.

Number-of-calls information for library routines is collected by using a special version of the C library. The programs in it are the same as in the usual C library, but they were compiled with `-pg'. If you link your program with `gcc ... -pg', it automatically uses the profiling version of the library.

The output from gprof gives no indication of parts of your program that are limited by I/O or swapping bandwidth. This is because samples of the program counter are taken at fixed intervals of run time. Therefore, the time measurements in gprof output say nothing about time that your program was not running. For example, a part of the program that creates so much data that it cannot all fit in physical memory at once may run very slowly due to thrashing, but gprof will say it uses little time. On the other hand, sampling by run time has the advantage that the amount of load due to other users won't directly affect the output you get.

Statistical Inaccuracy of gprof Output

The run-time figures that gprof gives you are based on a sampling process, so they are subject to statistical inaccuracy. If a function runs only a small amount of time, so that on the average the sampling process ought to catch that function in the act only once, there is a pretty good chance it will actually find that function zero times, or twice.

By contrast, the number-of-calls figures are derived by counting, not sampling. They are completely accurate and will not vary from run to run if your program is deterministic.

The sampling period that is printed at the beginning of the flat profile says how often samples are taken. The rule of thumb is that a run-time figure is accurate if it is considerably bigger than the sampling period.

The actual amount of error is usually more than one sampling period. In fact, if a value is n times the sampling period, the expected error in it is the square-root of n sampling periods. If the sampling period is 0.01 seconds and foo's run-time is 1 second, the expected error in foo's run-time is 0.1 seconds. It is likely to vary this much on the average from one profiling run to the next. (Sometimes it will vary more.)

This does not mean that a small run-time figure is devoid of information. If the program's total run-time is large, a small run-time for one function does tell you that that function used an insignificant fraction of the whole program's time. Usually this means it is not worth optimizing.

One way to get more accuracy is to give your program more (but similar) input data so it will take longer. Another way is to combine the data from several runs, using the `-s' option of gprof. Here is how:

Run your program once.
Issue the command `mv gmon.out gmon.sum'.
Run your program again, the same as before.
Merge the new data in `gmon.out' into `gmon.sum' with this command:
gprof -s executable-file gmon.out gmon.sum
Repeat the last two steps as often as you wish.
Analyze the cumulative data using this command:
gprof executable-file gmon.sum > output-file
Estimating children Times Uses an Assumption

Some of the figures in the call graph are estimates--for example, the children time values and all the the time figures in caller and subroutine lines.

There is no direct information about these measurements in the profile data itself. Instead, gprof estimates them by making an assumption about your program that might or might not be true.

The assumption made is that the average time spent in each call to any function foo is not correlated with who called foo. If foo used 5 seconds in all, and 2/5 of the calls to foo came from a, then foo contributes 2 seconds to a's children time, by assumption.

This assumption is usually true enough, but for some programs it is far from true. Suppose that foo returns very quickly when its argument is zero; suppose that a always passes zero as an argument, while other callers of foo pass other arguments. In this program, all the time spent in foo is in the calls from callers other than a. But gprof has no way of knowing this; it will blindly and incorrectly charge 2 seconds of time in foo to the children of a.

We hope some day to put more complete data into `gmon.out', so that this assumption is no longer needed, if we can figure out how. For the nonce, the estimated figures are usually more useful than misleading.

Incompatibilities with Unix gprof

GNU gprof and Berkeley Unix gprof use the same data file `gmon.out', and provide essentially the same information. But there are a few differences.

For a recursive function, Unix gprof lists the function as a parent and as a child, with a calls field that lists the number of recursive calls. GNU gprof omits these lines and puts the number of recursive calls in the primary line.
When a function is suppressed from the call graph with `-e', GNU gprof still lists it as a subroutine of functions that call it.
The blurbs, field widths, and output formats are different. GNU gprof prints blurbs after the tables, so that you can see the tables without skipping the blurbs.
5.2.1 The Primary Line

The primary line in a call graph entry is the line that describes the function which the entry is about and gives the overall statistics for this function.

For reference, we repeat the primary line from the entry for function report in our main example, together with the heading line that shows the names of the fields:

     index  % time    self  children called     name
     ...
     [3]    100.0    0.00    0.05       1         report [3]
Here is what the fields in the primary line mean:

index
Entries are numbered with consecutive integers. Each function therefore has an index number, which appears at the beginning of its primary line.
Each cross-reference to a function, as a caller or subroutine of another, gives its index number as well as its name. The index number guides you if you wish to look for the entry for that function. 

% time
This is the percentage of the total time that was spent in this function, including time spent in subroutines called from this function.
The time spent in this function is counted again for the callers of this function. Therefore, adding up these percentages is meaningless. 

self
This is the total amount of time spent in this function. This should be identical to the number printed in the seconds field for this function in the flat profile. 
children
This is the total amount of time spent in the subroutine calls made by this function. This should be equal to the sum of all the self and children entries of the children listed directly below this function. 
called
This is the number of times the function was called.
If the function called itself recursively, there are two numbers, separated by a `+'. The first number counts non-recursive calls, and the second counts recursive calls.

In the example above, the function report was called once from main. 

name
This is the name of the current function. The index number is repeated after it.
If the function is part of a cycle of recursion, the cycle number is printed between the function's name and the index number (see How Mutually Recursive Functions Are Described). For example, if function gnurr is part of cycle number one, and has index number twelve, its primary line would be end like this:

          gnurr <cycle 1> [12]
     
1 Introduction to Profiling

Profiling allows you to learn where your program spent its time and which functions called which other functions while it was executing. This information can show you which pieces of your program are slower than you expected, and might be candidates for rewriting to make your program execute faster. It can also tell you which functions are being called more or less often than you expected. This may help you spot bugs that had otherwise been unnoticed.

Since the profiler uses information collected during the actual execution of your program, it can be used on programs that are too large or too complex to analyze by reading the source. However, how your program is run will affect the information that shows up in the profile data. If you don't use some feature of your program while it is being profiled, no profile information will be generated for that feature.

Profiling has several steps:

You must compile and link your program with profiling enabled. See Compiling a Program for Profiling.
You must execute your program to generate a profile data file. See Executing the Program.
You must run gprof to analyze the profile data. See gprof Command Summary.
The next three chapters explain these steps in greater detail.

Several forms of output are available from the analysis.

The flat profile shows how much time your program spent in each function, and how many times that function was called. If you simply want to know which functions burn most of the cycles, it is stated concisely here. See The Flat Profile.

The call graph shows, for each function, which functions called it, which other functions it called, and how many times. There is also an estimate of how much time was spent in the subroutines of each function. This can suggest places where you might try to eliminate function calls that use a lot of time. See The Call Graph.

The annotated source listing is a copy of the program's source code, labeled with the number of times each line of the program was executed. See The Annotated Source Listing.

To better understand how profiling works, you may wish to read a description of its implementation. See Implementation of Profiling.
Speed your code with the GNU profiler
Target the parts of your applications that take the most time
Martyn Honeyford (ibmmartyn@gmail.com), Software Engineer, IBM
Summary:  Improving the performance of your applications is rarely a wasted effort, but it's not always clear which functions the program is spending most of its execution time on. Learn how to pinpoint performance bottlenecks using gprof for both user-space and system calls on Linux®.
Tag this!Update My dW interests (Log in | What's this?) Skip to help for Update My dW interests
Date:  03 Apr 2006 
Level:  Introductory 

Comments:    (View | Add comment - Sign in)
Average rating 4 stars based on 147 votes Average rating (147 votes)
Rate this article
Introduction
The performance needs of software vary, but it's probably not surprising that many applications have very stringent speed requirements. Video players are a good example: a video player is not much use if it can only play a video at 75 percent of the required speed.
Other applications, such as video encoding, are lengthy operations that are best run "batch" style, where you start a job and leave it running while you go do something else. Although these types of applications don't have such hard performance limits, increasing speed will still bring benefits, such as being able to encode more videos over a given period and being able to encode at a higher quality in the same time.
In general, for all but the simplest applications, the better the performance, the more useful and popular the application will be. For this reason, performance considerations are (or should be) in the forefront of many application developers' minds.
Unfortunately, much of the effort that is expended attempting to make applications faster is wasted, because developers will often micro-optimize their software without fully exploring how the program operates at a macro scale. For instance, you might spend a large amount of time making a particular function run twice as fast, which is all well and good, but if that function is called very rarely (when a file is opened, say) then reducing the execution time from 200ms to 100ms isn't going to make much difference to the overall execution time of the software.
A more fruitful use of your time would be spent optimizing those parts of the software that are called more frequently. For example, if the application spends 50 percent of its time in string-handling functions and if you can optimize these functions by 10 percent, this will yield a 5 percent overall improvement in the application's execution time.
It is therefore vital that you have accurate information on exactly where the time is being spent within your applications -- and for real input data -- if you hope to have a chance of optimizing it effectively. This activity is called code profiling. This article introduces a profiling tool provided with the GNU compiler tool chain, the imaginatively named GNU profiler (gprof), for those who are relatively new to open source development tools.
gprof to the rescue
Before I race off and explain how to use gprof, it's important to know where in the development cycle profiling should take place. In general, code should be written with the following three goals, in order of importance:
Make the software work correctly. This must always be the focus of development. In general, there is no point writing software that is very fast if it does not do what it is supposed to! Obviously, correctness is something of a grey area; a video player that works on 99 percent of your files or plays video with the occasional visual glitch is still of some use, but in general, correctness is more important than speed.

Make the software maintainable. This is really a sub-point of the first goal. In general, if software is not written to be maintainable, then even if it works to begin with, sooner or later you (or someone else) will end up breaking it trying to fix bugs or add new features.

Make the software fast. Here is where profiling comes in. Once the software is working correctly, then start profiling to help it run more quickly.
Assuming you are in the position of having a working application, let's look at how to use gprof to accurately measure where time is being spent during the application's execution in order to gain clues as to where your optimizing efforts would be most profitably spent.
gprof can profile C, C++, Pascal, and Fortran 77 applications. The examples here use C.

Listing 1. Sample time-wasting application
#include <stdio.h>

int a(void) {
  int i=0,g=0;
  while(i++<100000)
  {
     g+=i;
  }
  return g;
}
int b(void) {
  int i=0,g=0;
  while(i++<400000)
  {
    g+=i;
  }
  return g;
}

int main(int argc, char** argv)
{
   int iterations;

   if(argc != 2)
   {
      printf("Usage %s <No of Iterations>\n", argv[0]);
      exit(-1);
   }
   else
      iterations = atoi(argv[1]);

   printf("No of iterations = %d\n", iterations);

   while(iterations--)
   {
      a();
      b();
   }
}

As you can see from the code, this very simple app includes two functions, a and b, both of which sit in busy loops wasting CPU cycles. The main function just sits in a loop calling each of these functions. The second function, b, loops four times more than a, so you would expect that once you've profiled the code, it should spend approximately 20 percent of its time in a and 80 percent in b. Let's enable profiling and see if those expectations are correct.
Enabling profiling is as simple as adding -pg to the gcc compile flags. Compile as follows:
gcc example1.c -pg -o example1 -O2 -lc
Once you have built the application, simply run it as normal:
./example1 50000
Once this completes, you should see a file called gmon.out created in the current directory.
Using the output
First look at the "flat profile," which you obtain with the gprof command, passing the executable itself and the gmon.out file as follows:
gprof example1 gmon.out -p
Which outputs the following:

Listing 2. Results of flat profile
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  ms/call  ms/call  name
 80.24     63.85    63.85    50000     1.28     1.28  b
 20.26     79.97    16.12    50000     0.32     0.32  a

You can see from this output that, as expected, approximately four times as much time is spent in b as is spent in a. The actual numbers are not very useful; they tend to be very inaccurate due to rounding errors.
Astute readers will notice that many of the functions called (such as printf) are missing from the output. This is because they reside within the C runtime library (libc.so), which was not (in this case) compiled with -pg and, hence, no profiling is gathered for any functions within this library. I will return to this below.
Next you might like to see the "call graph," which you obtain as follows:
gprof example1 gmon.out -q
Which outputs the following:

Listing 3. Call graph
                     Call graph (explanation follows)
granularity: each sample hit covers 2 byte(s) for 0.01% of 79.97 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00   79.97                 main [1]
               63.85    0.00   50000/50000       b [2]
               16.12    0.00   50000/50000       a [3]
-----------------------------------------------
               63.85    0.00   50000/50000       main [1]
[2]     79.8   63.85    0.00   50000         b [2]
-----------------------------------------------
               16.12    0.00   50000/50000       main [1]
[3]     20.2   16.12    0.00   50000         a [3]
-----------------------------------------------

Finally, you might want to have an "annotated source" listing, which prints out the source code to the application, with notes on how many times each function is called.
To use this function, compile the source with debugging enabled so that the source is put into the executable:
gcc example1.c -g -pg -o example1 -O2 -lc
Re-run the application as before:
./example1 50000
Your gprof command is now:
gprof example1 gmon.out -A
This outputs the following:

Listing 4. Annotated source
*** File /home/martynh/profarticle/example1.c:
                #include <stdio.h>

       50000 -> int a(void) {
                  int i=0,g=0;
                  while(i++<100000)
                  {
                     g+=i;
                  }
                  return g;
                }
       50000 -> int b(void) {
                  int i=0,g=0;
                  while(i++<400000)
                  {
                    g+=i;
                  }
                  return g;
                }

                int main(int argc, char** argv)
       ##### -> {
                   int iterations;

                   if(argc != 2)
                   {
                      printf("Usage %s <No of Iterations>\n", argv[0]);
                      exit(-1);
                   }
                   else
                      iterations = atoi(argv[1]);

                   printf("No of iterations = %d\n", iterations);

                   while(iterations--)
                   {
                      a();
                      b();
                   }
                }



Top 10 Lines:

     Line      Count

        3      50000
       11      50000
Execution Summary:

        3   Executable lines in this file
        3   Lines executed
   100.00   Percent of the file executed

   100000   Total number of line executions
 33333.33   Average executions per line

Shared library support
As I alluded to earlier, profiling support is added by the compiler, so if you wish to obtain profiling information from any shared libraries, including the C library (libc.a), you need to also compile them with -pg. Luckily, many distributions ship with a version of the C library already compiled with profiling support (libc_p.a).
In the case of the distribution I use, gentoo, you need to add "profile" to your USE flags and re-emerge glibc. Once this finishes, you should see that /usr/lib/libc_p.a has been created. For distributions that do not ship with a libc_p as standard, you will need to check if it is installable separately, or you might need to download the glibc source and build it yourself.
Once you have a libc_p.a file, you can simply rebuild your example like so:
gcc example1.c -g -pg -o example1 -O2 -lc_p
If you then re-run the application as before and obtain a flat profile or a call graph, you should see lots of C runtime functions including printf (none of which are significant in our test program).
User time vs. kernel time
Now that you know how to use gprof, you can very simply and effectively profile your applications to analyze, and hopefully remove, performance bottlenecks.
However, you might have noticed by now one of gprof's biggest limitations: it only profiles user time while the application is running. Typically, applications spend some of their time in user code and some in "system code," such as kernel system calls.
If you modify Listing 1 slightly, you can see the problem clearly:

Listing 5. Adding system calls to Listing 1
#include <stdio.h>

int a(void) {
  sleep(1);
  return 0;
}
int b(void) {
  sleep(4);
  return 0;
}

int main(int argc, char** argv)
{
   int iterations;

   if(argc != 2)
   {
      printf("Usage %s <No of Iterations>\n", argv[0]);
      exit(-1);
   }
   else
      iterations = atoi(argv[1]);

   printf("No of iterations = %d\n", iterations);

   while(iterations--)
   {
      a();
      b();
   }
}

As you can see, I have modified the code so that rather than sitting in busy loops, a and b instead call the C-runtime function sleep to suspend execution for 1 and 4 seconds, respectively.
Compile this application as before:
gcc example2.c -g -pg -o example2 -O2 -lc_p
and execute it to loop 30 times:
./example2 30
The resulting flat profile shows the following:

Listing 6. Flat profile showing system calls
Flat profile:

Each sample counts as 0.01 seconds.
 no time accumulated

  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name
  0.00      0.00     0.00      120     0.00     0.00  sigprocmask
  0.00      0.00     0.00       61     0.00     0.00  __libc_sigaction
  0.00      0.00     0.00       61     0.00     0.00  sigaction
  0.00      0.00     0.00       60     0.00     0.00  nanosleep
  0.00      0.00     0.00       60     0.00     0.00  sleep
  0.00      0.00     0.00       30     0.00     0.00  a
  0.00      0.00     0.00       30     0.00     0.00  b
  0.00      0.00     0.00       21     0.00     0.00  _IO_file_overflow
  0.00      0.00     0.00        3     0.00     0.00  _IO_new_file_xsputn
  0.00      0.00     0.00        2     0.00     0.00  _IO_new_do_write
  0.00      0.00     0.00        2     0.00     0.00  __find_specmb
  0.00      0.00     0.00        2     0.00     0.00  __guard_setup
  0.00      0.00     0.00        1     0.00     0.00  _IO_default_xsputn
  0.00      0.00     0.00        1     0.00     0.00  _IO_doallocbuf
  0.00      0.00     0.00        1     0.00     0.00  _IO_file_doallocate
  0.00      0.00     0.00        1     0.00     0.00  _IO_file_stat
  0.00      0.00     0.00        1     0.00     0.00  _IO_file_write
  0.00      0.00     0.00        1     0.00     0.00  _IO_setb
  0.00      0.00     0.00        1     0.00     0.00  ____strtol_l_internal
  0.00      0.00     0.00        1     0.00     0.00  ___fxstat64
  0.00      0.00     0.00        1     0.00     0.00  __cxa_atexit
  0.00      0.00     0.00        1     0.00     0.00  __errno_location
  0.00      0.00     0.00        1     0.00     0.00  __new_exitfn
  0.00      0.00     0.00        1     0.00     0.00  __strtol_internal
  0.00      0.00     0.00        1     0.00     0.00  _itoa_word
  0.00      0.00     0.00        1     0.00     0.00  _mcleanup
  0.00      0.00     0.00        1     0.00     0.00  atexit
  0.00      0.00     0.00        1     0.00     0.00  atoi
  0.00      0.00     0.00        1     0.00     0.00  exit
  0.00      0.00     0.00        1     0.00     0.00  flockfile
  0.00      0.00     0.00        1     0.00     0.00  funlockfile
  0.00      0.00     0.00        1     0.00     0.00  main
  0.00      0.00     0.00        1     0.00     0.00  mmap
  0.00      0.00     0.00        1     0.00     0.00  moncontrol
  0.00      0.00     0.00        1     0.00     0.00  new_do_write
  0.00      0.00     0.00        1     0.00     0.00  printf
  0.00      0.00     0.00        1     0.00     0.00  setitimer
  0.00      0.00     0.00        1     0.00     0.00  vfprintf
  0.00      0.00     0.00        1     0.00     0.00  write

If you analyze the output, you can see that, although the profiler has registered the correct number of times each function has been called, the time registered for these functions (and indeed all functions) is 0.00. This is because the sleep function actually makes a call into kernel space to suspend the application and then effectively halts the execution and waits for the kernel to wake it up again. As the total amount of time executing in user space is tiny compared to the time spent sleeping in kernel space, it gets rounded to zero. The reason for this is that gprof works by instrumenting the program such that measurements are taken at fixed intervals of the program's run time. Therefore, no measurements are taken while the program is not running.
This is really a mixed blessing. On the one hand, it makes it difficult to optimize applications that spend most of their time in kernel space or that run slowly due to external factors such as overloading the operating system's I/O subsystem. On the other hand, it means profiling is not affected by anything else occurring on the system (such as another user using lots of CPU time).
In general, a good benchmark for seeing how useful gprof will be in helping you optimize your application is to run it under the time command. This command notes how long it takes for an application to complete and also measures how long it spends in user space and in kernel space.
If you look at the Listing 2 example:
time ./example2 30
This outputs the following:

Listing 7. Output of time command
No of iterations = 30

real    2m30.295s
user    0m0.000s
sys     0m0.004s

You can see that approximately no time is spent executing code in user space, so gprof will not really be useful here.
Conclusion
Despite the limitations outlined above, gprof can be a very useful tool for optimizing your code, particularly if your code is generally CPU bound in user space. It is usually a good idea to run your application under time first to determine if gprof is likely to yield useful information.
If gprof is not suitable for your profiling needs, a number of alternatives overcome some of gprof's limitations, including OProfile and Sysprof (see Resources for links to more information on these tools).
On the other hand -- assuming you have gcc installed -- one of the main advantages of gprof over the alternatives is that you most likely already have it installed on any Linux machine you use.

Resources
Learn
For more information on using gprof, read the GNU profiler manual. 

Learn more about OProfile in "Identify performance bottlenecks with OProfile for Linux on POWER" (developerWorks, May 2005) and "Smashing performance with OProfile" (developerWorks, October 2003).

Visit the OProfile home page. 

Read more about the System-wide Linux profiler (Sysprof). 

In the developerWorks Linux zone, find more resources for Linux developers. 

Stay current with developerWorks technical events and Webcasts. 

Get products and technologies
Order the SEK for Linux, a two-DVD set containing the latest IBM trial software for Linux from DB2®, Lotus®, Rational®, Tivoli®, and WebSphere®. 

With IBM trial software, available for download directly from developerWorks, build your next development project on Linux. 

Discuss
Check out developerWorks blogs and get involved in the developerWorks community. 

About the author
Martyn Honeyford graduated from Nottingham University with a BS in Computer Science in 1996. He has worked as a software engineer at IBM UK Labs in Hursley, England, ever since. His current role is as a developer in the WebSphere MQ Everyplace development team. When not working, Martyn can usually be found either playing the electric guitar (badly) or playing video games more than most people would consider healthy.
GNU gprof

This manual describes the GNU profiler, gprof, and how you can use it to determine which parts of a program are taking most of the execution time. We assume that you know how to write, compile, and execute programs. GNU gprof was written by Jay Fenlason.

This manual was edited January 1993 by Jeffrey Osier.

Copyright (C) 1988, 1992 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual into another language, under the same conditions as for modified versions.

Why Profile

Profiling allows you to learn where your program spent its time and which functions called which other functions while it was executing. This information can show you which pieces of your program are slower than you expected, and might be candidates for rewriting to make your program execute faster. It can also tell you which functions are being called more or less often than you expected. This may help you spot bugs that had otherwise been unnoticed.

Since the profiler uses information collected during the actual execution of your program, it can be used on programs that are too large or too complex to analyze by reading the source. However, how your program is run will affect the information that shows up in the profile data. If you don't use some feature of your program while it is being profiled, no profile information will be generated for that feature.

Profiling has several steps:

You must compile and link your program with profiling enabled. See section Compiling a Program for Profiling.
You must execute your program to generate a profile data file. See section Executing the Program to Generate Profile Data.
You must run gprof to analyze the profile data. See section gprof Command Summary.
The next three chapters explain these steps in greater detail.

The result of the analysis is a file containing two tables, the flat profile and the call graph (plus blurbs which briefly explain the contents of these tables).

The flat profile shows how much time your program spent in each function, and how many times that function was called. If you simply want to know which functions burn most of the cycles, it is stated concisely here. See section How to Understand the Flat Profile.

The call graph shows, for each function, which functions called it, which other functions it called, and how many times. There is also an estimate of how much time was spent in the subroutines of each function. This can suggest places where you might try to eliminate function calls that use a lot of time. See section How to Read the Call Graph.

Compiling a Program for Profiling

The first step in generating profile information for your program is to compile and link it with profiling enabled.

To compile a source file for profiling, specify the `-pg' option when you run the compiler. (This is in addition to the options you normally use.)

To link the program for profiling, if you use a compiler such as cc to do the linking, simply specify `-pg' in addition to your usual options. The same option, `-pg', alters either compilation or linking to do what is necessary for profiling. Here are examples:

cc -g -c myprog.c utils.c -pg
cc -o myprog myprog.o utils.o -pg
The `-pg' option also works with a command that both compiles and links:

cc -o myprog myprog.c utils.c -g -pg
If you run the linker ld directly instead of through a compiler such as cc, you must specify the profiling startup file `/lib/gcrt0.o' as the first input file instead of the usual startup file `/lib/crt0.o'. In addition, you would probably want to specify the profiling C library, `/usr/lib/libc_p.a', by writing `-lc_p' instead of the usual `-lc'. This is not absolutely necessary, but doing this gives you number-of-calls information for standard library functions such as read and open. For example:

ld -o myprog /lib/gcrt0.o myprog.o utils.o -lc_p
If you compile only some of the modules of the program with `-pg', you can still profile the program, but you won't get complete information about the modules that were compiled without `-pg'. The only information you get for the functions in those modules is the total time spent in them; there is no record of how many times they were called, or from where. This will not affect the flat profile (except that the calls field for the functions will be blank), but will greatly reduce the usefulness of the call graph.

Executing the Program to Generate Profile Data

Once the program is compiled for profiling, you must run it in order to generate the information that gprof needs. Simply run the program as usual, using the normal arguments, file names, etc. The program should run normally, producing the same output as usual. It will, however, run somewhat slower than normal because of the time spent collecting and the writing the profile data.

The way you run the program--the arguments and input that you give it--may have a dramatic effect on what the profile information shows. The profile data will describe the parts of the program that were activated for the particular input you use. For example, if the first command you give to your program is to quit, the profile data will show the time used in initialization and in cleanup, but not much else.

You program will write the profile data into a file called `gmon.out' just before exiting. If there is already a file called `gmon.out', its contents are overwritten. There is currently no way to tell the program to write the profile data under a different name, but you can rename the file afterward if you are concerned that it may be overwritten.

In order to write the `gmon.out' file properly, your program must exit normally: by returning from main or by calling exit. Calling the low-level function _exit does not write the profile data, and neither does abnormal termination due to an unhandled signal.

The `gmon.out' file is written in the program's current working directory at the time it exits. This means that if your program calls chdir, the `gmon.out' file will be left in the last directory your program chdir'd to. If you don't have permission to write in this directory, the file is not written. You may get a confusing error message if this happens. (We have not yet replaced the part of Unix responsible for this; when we do, we will make the error message comprehensible.)

gprof Command Summary

After you have a profile data file `gmon.out', you can run gprof to interpret the information in it. The gprof program prints a flat profile and a call graph on standard output. Typically you would redirect the output of gprof into a file with `>'.

You run gprof like this:

gprof options [executable-file [profile-data-files...]] [> outfile]
Here square-brackets indicate optional arguments.

If you omit the executable file name, the file `a.out' is used. If you give no profile data file name, the file `gmon.out' is used. If any file is not in the proper format, or if the profile data file does not appear to belong to the executable file, an error message is printed.

You can give more than one profile data file by entering all their names after the executable file name; then the statistics in all the data files are summed together.

The following options may be used to selectively include or exclude functions in the output:

-a
The `-a' option causes gprof to suppress the printing of statically declared (private) functions. (These are functions whose names are not listed as global, and which are not visible outside the file/function/block where they were defined.) Time spent in these functions, calls to/from them, etc, will all be attributed to the function that was loaded directly before it in the executable file. This option affects both the flat profile and the call graph.
-e function_name
The `-e function' option tells gprof to not print information about the function function_name (and its children...) in the call graph. The function will still be listed as a child of any functions that call it, but its index number will be shown as `[not printed]'. More than one `-e' option may be given; only one function_name may be indicated with each `-e' option.
-E function_name
The -E function option works like the -e option, but time spent in the function (and children who were not called from anywhere else), will not be used to compute the percentages-of-time for the call graph. More than one `-E' option may be given; only one function_name may be indicated with each `-E' option.
-f function_name
The `-f function' option causes gprof to limit the call graph to the function function_name and its children (and their children...). More than one `-f' option may be given; only one function_name may be indicated with each `-f' option.
-F function_name
The `-F function' option works like the -f option, but only time spent in the function and its children (and their children...) will be used to determine total-time and percentages-of-time for the call graph. More than one `-F' option may be given; only one function_name may be indicated with each `-F' option. The `-F' option overrides the `-E' option.
-k from... to...
The `-k' option allows you to delete from the profile any arcs from routine from to routine to.
-v
The `-v' flag causes gprof to print the current version number, and then exit.
-z
If you give the `-z' option, gprof will mention all functions in the flat profile, even those that were never called, and that had no time spent in them. This is useful in conjunction with the `-c' option for discovering which routines were never called.
The order of these options does not matter.

Note that only one function can be specified with each -e, -E, -f or -F option. To specify more than one function, use multiple options. For example, this command:

gprof -e boring -f foo -f bar myprogram > gprof.output
lists in the call graph all functions that were reached from either foo or bar and were not reachable from boring.

There are a few other useful gprof options:

-b
If the `-b' option is given, gprof doesn't print the verbose blurbs that try to explain the meaning of all of the fields in the tables. This is useful if you intend to print out the output, or are tired of seeing the blurbs.
-c
The `-c' option causes the static call-graph of the program to be discovered by a heuristic which examines the text space of the object file. Static-only parents or children are indicated with call counts of `0'.
-d num
The `-d num' option specifies debugging options.
-s
The `-s' option causes gprof to summarize the information in the profile data files it read in, and write out a profile data file called `gmon.sum', which contains all the information from the profile data files that gprof read in. The file `gmon.sum' may be one of the specified input files; the effect of this is to merge the data in the other input files into `gmon.sum'. See section Statistical Inaccuracy of gprof Output.
Eventually you can run gprof again without `-s' to analyze the cumulative data in the file `gmon.sum'.

-T
The `-T' option causes gprof to print its output in "traditional" BSD style.

How to Understand the Flat Profile

The flat profile shows the total amount of time your program spent executing each function. Unless the `-z' option is given, functions with no apparent time spent in them, and no apparent calls to them, are not mentioned. Note that if a function was not compiled for profiling, and didn't run long enough to show up on the program counter histogram, it will be indistinguishable from a function that was never called.

This is part of a flat profile for a small program:

Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 33.34      0.02     0.02     7208     0.00     0.00  open
 16.67      0.03     0.01      244     0.04     0.12  offtime
 16.67      0.04     0.01        8     1.25     1.25  memccpy
 16.67      0.05     0.01        7     1.43     1.43  write
 16.67      0.06     0.01                             mcount
  0.00      0.06     0.00      236     0.00     0.00  tzset
  0.00      0.06     0.00      192     0.00     0.00  tolower
  0.00      0.06     0.00       47     0.00     0.00  strlen
  0.00      0.06     0.00       45     0.00     0.00  strchr
  0.00      0.06     0.00        1     0.00    50.00  main
  0.00      0.06     0.00        1     0.00     0.00  memcpy
  0.00      0.06     0.00        1     0.00    10.11  print
  0.00      0.06     0.00        1     0.00     0.00  profil
  0.00      0.06     0.00        1     0.00    50.00  report
...
The functions are sorted by decreasing run-time spent in them. The functions `mcount' and `profil' are part of the profiling aparatus and appear in every flat profile; their time gives a measure of the amount of overhead due to profiling.

The sampling period estimates the margin of error in each of the time figures. A time figure that is not much larger than this is not reliable. In this example, the `self seconds' field for `mcount' might well be `0' or `0.04' in another run. See section Statistical Inaccuracy of gprof Output, for a complete discussion.

Here is what the fields in each line mean:

% time
This is the percentage of the total execution time your program spent in this function. These should all add up to 100%.
cumulative seconds
This is the cumulative total number of seconds the computer spent executing this functions, plus the time spent in all the functions above this one in this table.
self seconds
This is the number of seconds accounted for by this function alone. The flat profile listing is sorted first by this number.
calls
This is the total number of times the function was called. If the function was never called, or the number of times it was called cannot be determined (probably because the function was not compiled with profiling enabled), the calls field is blank.
self ms/call
This represents the average number of milliseconds spent in this function per call, if this function is profiled. Otherwise, this field is blank for this function.
total ms/call
This represents the average number of milliseconds spent in this function and its descendants per call, if this function is profiled. Otherwise, this field is blank for this function.
name
This is the name of the function. The flat profile is sorted by this field alphabetically after the self seconds field is sorted.

How to Read the Call Graph

The call graph shows how much time was spent in each function and its children. From this information, you can find functions that, while they themselves may not have used much time, called other functions that did use unusual amounts of time.

Here is a sample call from a small program. This call came from the same gprof run as the flat profile example in the previous chapter.

granularity: each sample hit covers 2 byte(s) for 20.00% of 0.05 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00    0.05                 start [1]
                0.00    0.05       1/1           main [2]
                0.00    0.00       1/2           on_exit [28]
                0.00    0.00       1/1           exit [59]
-----------------------------------------------
                0.00    0.05       1/1           start [1]
[2]    100.0    0.00    0.05       1         main [2]
                0.00    0.05       1/1           report [3]
-----------------------------------------------
                0.00    0.05       1/1           main [2]
[3]    100.0    0.00    0.05       1         report [3]
                0.00    0.03       8/8           timelocal [6]
                0.00    0.01       1/1           print [9]
                0.00    0.01       9/9           fgets [12]
                0.00    0.00      12/34          strncmp <cycle 1> [40]
                0.00    0.00       8/8           lookup [20]
                0.00    0.00       1/1           fopen [21]
                0.00    0.00       8/8           chewtime [24]
                0.00    0.00       8/16          skipspace [44]
-----------------------------------------------
[4]     59.8    0.01        0.02       8+472     <cycle 2 as a whole>	[4]
                0.01        0.02     244+260         offtime <cycle 2> [7]
                0.00        0.00     236+1           tzset <cycle 2> [26]
-----------------------------------------------
The lines full of dashes divide this table into entries, one for each function. Each entry has one or more lines.

In each entry, the primary line is the one that starts with an index number in square brackets. The end of this line says which function the entry is for. The preceding lines in the entry describe the callers of this function and the following lines describe its subroutines (also called children when we speak of the call graph).

The entries are sorted by time spent in the function and its subroutines.

The internal profiling function mcount (see section How to Understand the Flat Profile) is never mentioned in the call graph.

The Primary Line

The primary line in a call graph entry is the line that describes the function which the entry is about and gives the overall statistics for this function.

For reference, we repeat the primary line from the entry for function report in our main example, together with the heading line that shows the names of the fields:

index  % time    self  children called     name
...
[3]    100.0    0.00    0.05       1         report [3]
Here is what the fields in the primary line mean:

index
Entries are numbered with consecutive integers. Each function therefore has an index number, which appears at the beginning of its primary line.
Each cross-reference to a function, as a caller or subroutine of another, gives its index number as well as its name. The index number guides you if you wish to look for the entry for that function.

% time
This is the percentage of the total time that was spent in this function, including time spent in subroutines called from this function.
The time spent in this function is counted again for the callers of this function. Therefore, adding up these percentages is meaningless.

self
This is the total amount of time spent in this function. This should be identical to the number printed in the seconds field for this function in the flat profile.
children
This is the total amount of time spent in the subroutine calls made by this function. This should be equal to the sum of all the self and children entries of the children listed directly below this function.
called
This is the number of times the function was called.
If the function called itself recursively, there are two numbers, separated by a `+'. The first number counts non-recursive calls, and the second counts recursive calls.

In the example above, the function report was called once from main.

name
This is the name of the current function. The index number is repeated after it.
If the function is part of a cycle of recursion, the cycle number is printed between the function's name and the index number (see section How Mutually Recursive Functions Are Described). For example, if function gnurr is part of cycle number one, and has index number twelve, its primary line would be end like this:

gnurr <cycle 1> [12]
Lines for a Function's Callers

A function's entry has a line for each function it was called by. These lines' fields correspond to the fields of the primary line, but their meanings are different because of the difference in context.

For reference, we repeat two lines from the entry for the function report, the primary line and one caller-line preceding it, together with the heading line that shows the names of the fields:

index  % time    self  children called     name
...
                0.00    0.05       1/1           main [2]
[3]    100.0    0.00    0.05       1         report [3]
Here are the meanings of the fields in the caller-line for report called from main:

self
An estimate of the amount of time spent in report itself when it was called from main.
children
An estimate of the amount of time spent in subroutines of report when report was called from main.
The sum of the self and children fields is an estimate of the amount of time spent within calls to report from main.

called
Two numbers: the number of times report was called from main, followed by the total number of nonrecursive calls to report from all its callers.
name and index number
The name of the caller of report to which this line applies, followed by the caller's index number.
Not all functions have entries in the call graph; some options to gprof request the omission of certain functions. When a caller has no entry of its own, it still has caller-lines in the entries of the functions it calls.

If the caller is part of a recursion cycle, the cycle number is printed between the name and the index number.

If the identity of the callers of a function cannot be determined, a dummy caller-line is printed which has `<spontaneous>' as the "caller's name" and all other fields blank. This can happen for signal handlers.

Lines for a Function's Subroutines

A function's entry has a line for each of its subroutines--in other words, a line for each other function that it called. These lines' fields correspond to the fields of the primary line, but their meanings are different because of the difference in context.

For reference, we repeat two lines from the entry for the function main, the primary line and a line for a subroutine, together with the heading line that shows the names of the fields:

index  % time    self  children called     name
...
[2]    100.0    0.00    0.05       1         main [2]
                0.00    0.05       1/1           report [3]
Here are the meanings of the fields in the subroutine-line for main calling report:

self
An estimate of the amount of time spent directly within report when report was called from main.
children
An estimate of the amount of time spent in subroutines of report when report was called from main.
The sum of the self and children fields is an estimate of the total time spent in calls to report from main.

called
Two numbers, the number of calls to report from main followed by the total number of nonrecursive calls to report.
name
The name of the subroutine of main to which this line applies, followed by the subroutine's index number.
If the caller is part of a recursion cycle, the cycle number is printed between the name and the index number.


How Mutually Recursive Functions Are Described

The graph may be complicated by the presence of cycles of recursion in the call graph. A cycle exists if a function calls another function that (directly or indirectly) calls (or appears to call) the original function. For example: if a calls b, and b calls a, then a and b form a cycle.

Whenever there are call-paths both ways between a pair of functions, they belong to the same cycle. If a and b call each other and b and c call each other, all three make one cycle. Note that even if b only calls a if it was not called from a, gprof cannot determine this, so a and b are still considered a cycle.

The cycles are numbered with consecutive integers. When a function belongs to a cycle, each time the function name appears in the call graph it is followed by `<cycle number>'.

The reason cycles matter is that they make the time values in the call graph paradoxical. The "time spent in children" of a should include the time spent in its subroutine b and in b's subroutines--but one of b's subroutines is a! How much of a's time should be included in the children of a, when a is indirectly recursive?

The way gprof resolves this paradox is by creating a single entry for the cycle as a whole. The primary line of this entry describes the total time spent directly in the functions of the cycle. The "subroutines" of the cycle are the individual functions of the cycle, and all other functions that were called directly by them. The "callers" of the cycle are the functions, outside the cycle, that called functions in the cycle.

Here is an example portion of a call graph which shows a cycle containing functions a and b. The cycle was entered by a call to a from main; both a and b called c.

index  % time    self  children called     name
----------------------------------------
                 1.77        0    1/1        main [2]
[3]     91.71    1.77        0    1+5    <cycle 1 as a whole> [3]
                 1.02        0    3          b <cycle 1> [4]
                 0.75        0    2          a <cycle 1> [5]
----------------------------------------
                                  3          a <cycle 1> [5]
[4]     52.85    1.02        0    0      b <cycle 1> [4]
                                  2          a <cycle 1> [5]
                    0        0    3/6        c [6]
----------------------------------------
                 1.77        0    1/1        main [2]
                                  2          b <cycle 1> [4]
[5]     38.86    0.75        0    1      a <cycle 1> [5]
                                  3          b <cycle 1> [4]
                    0        0    3/6        c [6]
----------------------------------------
(The entire call graph for this program contains in addition an entry for main, which calls a, and an entry for c, with callers a and b.)

index  % time    self  children called     name
                                             <spontaneous>
[1]    100.00       0     1.93    0      start [1]
                 0.16     1.77    1/1        main [2]
----------------------------------------
                 0.16     1.77    1/1        start [1]
[2]    100.00    0.16     1.77    1      main [2]
                 1.77        0    1/1        a <cycle 1> [5]
----------------------------------------
                 1.77        0    1/1        main [2]
[3]     91.71    1.77        0    1+5    <cycle 1 as a whole> [3]
                 1.02        0    3          b <cycle 1> [4]
                 0.75        0    2          a <cycle 1> [5]
                    0        0    6/6        c [6]
----------------------------------------
                                  3          a <cycle 1> [5]
[4]     52.85    1.02        0    0      b <cycle 1> [4]
                                  2          a <cycle 1> [5]
                    0        0    3/6        c [6]
----------------------------------------
                 1.77        0    1/1        main [2]
                                  2          b <cycle 1> [4]
[5]     38.86    0.75        0    1      a <cycle 1> [5]
                                  3          b <cycle 1> [4]
                    0        0    3/6        c [6]
----------------------------------------
                    0        0    3/6        b <cycle 1> [4]
                    0        0    3/6        a <cycle 1> [5]
[6]      0.00       0        0    6      c [6]
----------------------------------------
The self field of the cycle's primary line is the total time spent in all the functions of the cycle. It equals the sum of the self fields for the individual functions in the cycle, found in the entry in the subroutine lines for these functions.

The children fields of the cycle's primary line and subroutine lines count only subroutines outside the cycle. Even though a calls b, the time spent in those calls to b is not counted in a's children time. Thus, we do not encounter the problem of what to do when the time in those calls to b includes indirect recursive calls back to a.

The children field of a caller-line in the cycle's entry estimates the amount of time spent in the whole cycle, and its other subroutines, on the times when that caller called a function in the cycle.

The calls field in the primary line for the cycle has two numbers: first, the number of times functions in the cycle were called by functions outside the cycle; second, the number of times they were called by functions in the cycle (including times when a function in the cycle calls itself). This is a generalization of the usual split into nonrecursive and recursive calls.

The calls field of a subroutine-line for a cycle member in the cycle's entry says how many time that function was called from functions in the cycle. The total of all these is the second number in the primary line's calls field.

In the individual entry for a function in a cycle, the other functions in the same cycle can appear as subroutines and as callers. These lines show how many times each function in the cycle called or was called from each other function in the cycle. The self and children fields in these lines are blank because of the difficulty of defining meanings for them when recursion is going on.

Implementation of Profiling

Profiling works by changing how every function in your program is compiled so that when it is called, it will stash away some information about where it was called from. From this, the profiler can figure out what function called it, and can count how many times it was called. This change is made by the compiler when your program is compiled with the `-pg' option.

Profiling also involves watching your program as it runs, and keeping a histogram of where the program counter happens to be every now and then. Typically the program counter is looked at around 100 times per second of run time, but the exact frequency may vary from system to system.

A special startup routine allocates memory for the histogram and sets up a clock signal handler to make entries in it. Use of this special startup routine is one of the effects of using `gcc ... -pg' to link. The startup file also includes an `exit' function which is responsible for writing the file `gmon.out'.

Number-of-calls information for library routines is collected by using a special version of the C library. The programs in it are the same as in the usual C library, but they were compiled with `-pg'. If you link your program with `gcc ... -pg', it automatically uses the profiling version of the library.

The output from gprof gives no indication of parts of your program that are limited by I/O or swapping bandwidth. This is because samples of the program counter are taken at fixed intervals of run time. Therefore, the time measurements in gprof output say nothing about time that your program was not running. For example, a part of the program that creates so much data that it cannot all fit in physical memory at once may run very slowly due to thrashing, but gprof will say it uses little time. On the other hand, sampling by run time has the advantage that the amount of load due to other users won't directly affect the output you get.

Statistical Inaccuracy of gprof Output

The run-time figures that gprof gives you are based on a sampling process, so they are subject to statistical inaccuracy. If a function runs only a small amount of time, so that on the average the sampling process ought to catch that function in the act only once, there is a pretty good chance it will actually find that function zero times, or twice.

By contrast, the number-of-calls figures are derived by counting, not sampling. They are completely accurate and will not vary from run to run if your program is deterministic.

The sampling period that is printed at the beginning of the flat profile says how often samples are taken. The rule of thumb is that a run-time figure is accurate if it is considerably bigger than the sampling period.

The actual amount of error is usually more than one sampling period. In fact, if a value is n times the sampling period, the expected error in it is the square-root of n sampling periods. If the sampling period is 0.01 seconds and foo's run-time is 1 second, the expected error in foo's run-time is 0.1 seconds. It is likely to vary this much on the average from one profiling run to the next. (Sometimes it will vary more.)

This does not mean that a small run-time figure is devoid of information. If the program's total run-time is large, a small run-time for one function does tell you that that function used an insignificant fraction of the whole program's time. Usually this means it is not worth optimizing.

One way to get more accuracy is to give your program more (but similar) input data so it will take longer. Another way is to combine the data from several runs, using the `-s' option of gprof. Here is how:

Run your program once.
Issue the command `mv gmon.out gmon.sum'.
Run your program again, the same as before.
Merge the new data in `gmon.out' into `gmon.sum' with this command:
gprof -s executable-file gmon.out gmon.sum
Repeat the last two steps as often as you wish.
Analyze the cumulative data using this command:
gprof executable-file gmon.sum > output-file
Estimating children Times Uses an Assumption

Some of the figures in the call graph are estimates--for example, the children time values and all the the time figures in caller and subroutine lines.

There is no direct information about these measurements in the profile data itself. Instead, gprof estimates them by making an assumption about your program that might or might not be true.

The assumption made is that the average time spent in each call to any function foo is not correlated with who called foo. If foo used 5 seconds in all, and 2/5 of the calls to foo came from a, then foo contributes 2 seconds to a's children time, by assumption.

This assumption is usually true enough, but for some programs it is far from true. Suppose that foo returns very quickly when its argument is zero; suppose that a always passes zero as an argument, while other callers of foo pass other arguments. In this program, all the time spent in foo is in the calls from callers other than a. But gprof has no way of knowing this; it will blindly and incorrectly charge 2 seconds of time in foo to the children of a.

We hope some day to put more complete data into `gmon.out', so that this assumption is no longer needed, if we can figure out how. For the nonce, the estimated figures are usually more useful than misleading.

Incompatibilities with Unix gprof

GNU gprof and Berkeley Unix gprof use the same data file `gmon.out', and provide essentially the same information. But there are a few differences.

For a recursive function, Unix gprof lists the function as a parent and as a child, with a calls field that lists the number of recursive calls. GNU gprof omits these lines and puts the number of recursive calls in the primary line.
When a function is suppressed from the call graph with `-e', GNU gprof still lists it as a subroutine of functions that call it.
The blurbs, field widths, and output formats are different. GNU gprof prints blurbs after the tables, so that you can see the tables without skipping the blurbs.
